/* 
 * Sign
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;
namespace IO.Swagger.Model
{
    /// <summary>
    /// CreateSessionRequest
    /// </summary>
    [DataContract]
        public partial class CreateSessionRequest :  IEquatable<CreateSessionRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateSessionRequest" /> class.
        /// </summary>
        /// <param name="process">process (required).</param>
        /// <param name="workFlow">workFlow.</param>
        /// <param name="metadata">metadata.</param>
        /// <param name="parameters">parameters.</param>
        /// <param name="attributes">attributes.</param>
        /// <param name="webhooks">webhooks.</param>
        /// <param name="approvers">approvers.</param>
        /// <param name="followers">followers.</param>
        /// <param name="documents">documents.</param>
        /// <param name="signers">signers.</param>
        /// <param name="requireIdentificationForSigners">requireIdentificationForSigners.</param>
        /// <param name="requireStrongAuthForSigners">requireStrongAuthForSigners.</param>
        /// <param name="requireStrongAuthForApprovers">requireStrongAuthForApprovers.</param>
        public CreateSessionRequest(ProcessType process = default(ProcessType), WorkFlowType workFlow = default(WorkFlowType), Dictionary<string, string> metadata = default(Dictionary<string, string>), Dictionary<string, string> parameters = default(Dictionary<string, string>), Dictionary<string, string> attributes = default(Dictionary<string, string>), List<CreateWebhookDto> webhooks = default(List<CreateWebhookDto>), List<CreateApproverDto> approvers = default(List<CreateApproverDto>), List<CreateFollowerDto> followers = default(List<CreateFollowerDto>), List<CreateDocumentDto> documents = default(List<CreateDocumentDto>), List<CreateSignerDto> signers = default(List<CreateSignerDto>), bool? requireIdentificationForSigners = default(bool?), bool? requireStrongAuthForSigners = default(bool?), bool? requireStrongAuthForApprovers = default(bool?))
        {
            // to ensure "process" is required (not null)
            if (process == null)
            {
                throw new InvalidDataException("process is a required property for CreateSessionRequest and cannot be null");
            }
            else
            {
                this.Process = process;
            }
            this.WorkFlow = workFlow;
            this.Metadata = metadata;
            this.Parameters = parameters;
            this.Attributes = attributes;
            this.Webhooks = webhooks;
            this.Approvers = approvers;
            this.Followers = followers;
            this.Documents = documents;
            this.Signers = signers;
            this.RequireIdentificationForSigners = requireIdentificationForSigners;
            this.RequireStrongAuthForSigners = requireStrongAuthForSigners;
            this.RequireStrongAuthForApprovers = requireStrongAuthForApprovers;
        }
        
        /// <summary>
        /// Gets or Sets Process
        /// </summary>
        [DataMember(Name="process", EmitDefaultValue=false)]
        public ProcessType Process { get; set; }

        /// <summary>
        /// Gets or Sets WorkFlow
        /// </summary>
        [DataMember(Name="workFlow", EmitDefaultValue=false)]
        public WorkFlowType WorkFlow { get; set; }

        /// <summary>
        /// Gets or Sets Metadata
        /// </summary>
        [DataMember(Name="metadata", EmitDefaultValue=false)]
        public Dictionary<string, string> Metadata { get; set; }

        /// <summary>
        /// Gets or Sets Parameters
        /// </summary>
        [DataMember(Name="parameters", EmitDefaultValue=false)]
        public Dictionary<string, string> Parameters { get; set; }

        /// <summary>
        /// Gets or Sets Attributes
        /// </summary>
        [DataMember(Name="attributes", EmitDefaultValue=false)]
        public Dictionary<string, string> Attributes { get; set; }

        /// <summary>
        /// Gets or Sets Webhooks
        /// </summary>
        [DataMember(Name="webhooks", EmitDefaultValue=false)]
        public List<CreateWebhookDto> Webhooks { get; set; }

        /// <summary>
        /// Gets or Sets Approvers
        /// </summary>
        [DataMember(Name="approvers", EmitDefaultValue=false)]
        public List<CreateApproverDto> Approvers { get; set; }

        /// <summary>
        /// Gets or Sets Followers
        /// </summary>
        [DataMember(Name="followers", EmitDefaultValue=false)]
        public List<CreateFollowerDto> Followers { get; set; }

        /// <summary>
        /// Gets or Sets Documents
        /// </summary>
        [DataMember(Name="documents", EmitDefaultValue=false)]
        public List<CreateDocumentDto> Documents { get; set; }

        /// <summary>
        /// Gets or Sets Signers
        /// </summary>
        [DataMember(Name="signers", EmitDefaultValue=false)]
        public List<CreateSignerDto> Signers { get; set; }

        /// <summary>
        /// Gets or Sets RequireIdentificationForSigners
        /// </summary>
        [DataMember(Name="requireIdentificationForSigners", EmitDefaultValue=false)]
        public bool? RequireIdentificationForSigners { get; set; }

        /// <summary>
        /// Gets or Sets RequireStrongAuthForSigners
        /// </summary>
        [DataMember(Name="requireStrongAuthForSigners", EmitDefaultValue=false)]
        public bool? RequireStrongAuthForSigners { get; set; }

        /// <summary>
        /// Gets or Sets RequireStrongAuthForApprovers
        /// </summary>
        [DataMember(Name="requireStrongAuthForApprovers", EmitDefaultValue=false)]
        public bool? RequireStrongAuthForApprovers { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateSessionRequest {\n");
            sb.Append("  Process: ").Append(Process).Append("\n");
            sb.Append("  WorkFlow: ").Append(WorkFlow).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  Parameters: ").Append(Parameters).Append("\n");
            sb.Append("  Attributes: ").Append(Attributes).Append("\n");
            sb.Append("  Webhooks: ").Append(Webhooks).Append("\n");
            sb.Append("  Approvers: ").Append(Approvers).Append("\n");
            sb.Append("  Followers: ").Append(Followers).Append("\n");
            sb.Append("  Documents: ").Append(Documents).Append("\n");
            sb.Append("  Signers: ").Append(Signers).Append("\n");
            sb.Append("  RequireIdentificationForSigners: ").Append(RequireIdentificationForSigners).Append("\n");
            sb.Append("  RequireStrongAuthForSigners: ").Append(RequireStrongAuthForSigners).Append("\n");
            sb.Append("  RequireStrongAuthForApprovers: ").Append(RequireStrongAuthForApprovers).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateSessionRequest);
        }

        /// <summary>
        /// Returns true if CreateSessionRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateSessionRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateSessionRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Process == input.Process ||
                    (this.Process != null &&
                    this.Process.Equals(input.Process))
                ) && 
                (
                    this.WorkFlow == input.WorkFlow ||
                    (this.WorkFlow != null &&
                    this.WorkFlow.Equals(input.WorkFlow))
                ) && 
                (
                    this.Metadata == input.Metadata ||
                    this.Metadata != null &&
                    input.Metadata != null &&
                    this.Metadata.SequenceEqual(input.Metadata)
                ) && 
                (
                    this.Parameters == input.Parameters ||
                    this.Parameters != null &&
                    input.Parameters != null &&
                    this.Parameters.SequenceEqual(input.Parameters)
                ) && 
                (
                    this.Attributes == input.Attributes ||
                    this.Attributes != null &&
                    input.Attributes != null &&
                    this.Attributes.SequenceEqual(input.Attributes)
                ) && 
                (
                    this.Webhooks == input.Webhooks ||
                    this.Webhooks != null &&
                    input.Webhooks != null &&
                    this.Webhooks.SequenceEqual(input.Webhooks)
                ) && 
                (
                    this.Approvers == input.Approvers ||
                    this.Approvers != null &&
                    input.Approvers != null &&
                    this.Approvers.SequenceEqual(input.Approvers)
                ) && 
                (
                    this.Followers == input.Followers ||
                    this.Followers != null &&
                    input.Followers != null &&
                    this.Followers.SequenceEqual(input.Followers)
                ) && 
                (
                    this.Documents == input.Documents ||
                    this.Documents != null &&
                    input.Documents != null &&
                    this.Documents.SequenceEqual(input.Documents)
                ) && 
                (
                    this.Signers == input.Signers ||
                    this.Signers != null &&
                    input.Signers != null &&
                    this.Signers.SequenceEqual(input.Signers)
                ) && 
                (
                    this.RequireIdentificationForSigners == input.RequireIdentificationForSigners ||
                    (this.RequireIdentificationForSigners != null &&
                    this.RequireIdentificationForSigners.Equals(input.RequireIdentificationForSigners))
                ) && 
                (
                    this.RequireStrongAuthForSigners == input.RequireStrongAuthForSigners ||
                    (this.RequireStrongAuthForSigners != null &&
                    this.RequireStrongAuthForSigners.Equals(input.RequireStrongAuthForSigners))
                ) && 
                (
                    this.RequireStrongAuthForApprovers == input.RequireStrongAuthForApprovers ||
                    (this.RequireStrongAuthForApprovers != null &&
                    this.RequireStrongAuthForApprovers.Equals(input.RequireStrongAuthForApprovers))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Process != null)
                    hashCode = hashCode * 59 + this.Process.GetHashCode();
                if (this.WorkFlow != null)
                    hashCode = hashCode * 59 + this.WorkFlow.GetHashCode();
                if (this.Metadata != null)
                    hashCode = hashCode * 59 + this.Metadata.GetHashCode();
                if (this.Parameters != null)
                    hashCode = hashCode * 59 + this.Parameters.GetHashCode();
                if (this.Attributes != null)
                    hashCode = hashCode * 59 + this.Attributes.GetHashCode();
                if (this.Webhooks != null)
                    hashCode = hashCode * 59 + this.Webhooks.GetHashCode();
                if (this.Approvers != null)
                    hashCode = hashCode * 59 + this.Approvers.GetHashCode();
                if (this.Followers != null)
                    hashCode = hashCode * 59 + this.Followers.GetHashCode();
                if (this.Documents != null)
                    hashCode = hashCode * 59 + this.Documents.GetHashCode();
                if (this.Signers != null)
                    hashCode = hashCode * 59 + this.Signers.GetHashCode();
                if (this.RequireIdentificationForSigners != null)
                    hashCode = hashCode * 59 + this.RequireIdentificationForSigners.GetHashCode();
                if (this.RequireStrongAuthForSigners != null)
                    hashCode = hashCode * 59 + this.RequireStrongAuthForSigners.GetHashCode();
                if (this.RequireStrongAuthForApprovers != null)
                    hashCode = hashCode * 59 + this.RequireStrongAuthForApprovers.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
