/* 
 * Sign
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;
namespace IO.Swagger.Model
{
    /// <summary>
    /// UploadFileBase64Request
    /// </summary>
    [DataContract]
        public partial class UploadFileBase64Request :  IEquatable<UploadFileBase64Request>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UploadFileBase64Request" /> class.
        /// </summary>
        /// <param name="base64">base64.</param>
        /// <param name="fileName">fileName.</param>
        /// <param name="mimeType">mimeType.</param>
        public UploadFileBase64Request(string base64 = default(string), string fileName = default(string), string mimeType = default(string))
        {
            this.Base64 = base64;
            this.FileName = fileName;
            this.MimeType = mimeType;
        }
        
        /// <summary>
        /// Gets or Sets Base64
        /// </summary>
        [DataMember(Name="base64", EmitDefaultValue=false)]
        public string Base64 { get; set; }

        /// <summary>
        /// Gets or Sets FileName
        /// </summary>
        [DataMember(Name="fileName", EmitDefaultValue=false)]
        public string FileName { get; set; }

        /// <summary>
        /// Gets or Sets MimeType
        /// </summary>
        [DataMember(Name="mimeType", EmitDefaultValue=false)]
        public string MimeType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UploadFileBase64Request {\n");
            sb.Append("  Base64: ").Append(Base64).Append("\n");
            sb.Append("  FileName: ").Append(FileName).Append("\n");
            sb.Append("  MimeType: ").Append(MimeType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UploadFileBase64Request);
        }

        /// <summary>
        /// Returns true if UploadFileBase64Request instances are equal
        /// </summary>
        /// <param name="input">Instance of UploadFileBase64Request to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UploadFileBase64Request input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Base64 == input.Base64 ||
                    (this.Base64 != null &&
                    this.Base64.Equals(input.Base64))
                ) && 
                (
                    this.FileName == input.FileName ||
                    (this.FileName != null &&
                    this.FileName.Equals(input.FileName))
                ) && 
                (
                    this.MimeType == input.MimeType ||
                    (this.MimeType != null &&
                    this.MimeType.Equals(input.MimeType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Base64 != null)
                    hashCode = hashCode * 59 + this.Base64.GetHashCode();
                if (this.FileName != null)
                    hashCode = hashCode * 59 + this.FileName.GetHashCode();
                if (this.MimeType != null)
                    hashCode = hashCode * 59 + this.MimeType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
