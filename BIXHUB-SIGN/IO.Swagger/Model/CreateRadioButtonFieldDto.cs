/* 
 * Sign
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;
namespace IO.Swagger.Model
{
    /// <summary>
    /// CreateRadioButtonFieldDto
    /// </summary>
    [DataContract]
        public partial class CreateRadioButtonFieldDto :  IEquatable<CreateRadioButtonFieldDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateRadioButtonFieldDto" /> class.
        /// </summary>
        /// <param name="shortDescription">shortDescription.</param>
        /// <param name="longDescription">longDescription.</param>
        /// <param name="indexOrder">indexOrder.</param>
        /// <param name="appearance">appearance.</param>
        /// <param name="position">position.</param>
        public CreateRadioButtonFieldDto(string shortDescription = default(string), string longDescription = default(string), float? indexOrder = default(float?), RadioButtonAppearance appearance = default(RadioButtonAppearance), CreatePositionDto position = default(CreatePositionDto))
        {
            this.ShortDescription = shortDescription;
            this.LongDescription = longDescription;
            this.IndexOrder = indexOrder;
            this.Appearance = appearance;
            this.Position = position;
        }
        
        /// <summary>
        /// Gets or Sets ShortDescription
        /// </summary>
        [DataMember(Name="shortDescription", EmitDefaultValue=false)]
        public string ShortDescription { get; set; }

        /// <summary>
        /// Gets or Sets LongDescription
        /// </summary>
        [DataMember(Name="longDescription", EmitDefaultValue=false)]
        public string LongDescription { get; set; }

        /// <summary>
        /// Gets or Sets IndexOrder
        /// </summary>
        [DataMember(Name="indexOrder", EmitDefaultValue=false)]
        public float? IndexOrder { get; set; }

        /// <summary>
        /// Gets or Sets Appearance
        /// </summary>
        [DataMember(Name="appearance", EmitDefaultValue=false)]
        public RadioButtonAppearance Appearance { get; set; }

        /// <summary>
        /// Gets or Sets Position
        /// </summary>
        [DataMember(Name="position", EmitDefaultValue=false)]
        public CreatePositionDto Position { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateRadioButtonFieldDto {\n");
            sb.Append("  ShortDescription: ").Append(ShortDescription).Append("\n");
            sb.Append("  LongDescription: ").Append(LongDescription).Append("\n");
            sb.Append("  IndexOrder: ").Append(IndexOrder).Append("\n");
            sb.Append("  Appearance: ").Append(Appearance).Append("\n");
            sb.Append("  Position: ").Append(Position).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateRadioButtonFieldDto);
        }

        /// <summary>
        /// Returns true if CreateRadioButtonFieldDto instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateRadioButtonFieldDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateRadioButtonFieldDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ShortDescription == input.ShortDescription ||
                    (this.ShortDescription != null &&
                    this.ShortDescription.Equals(input.ShortDescription))
                ) && 
                (
                    this.LongDescription == input.LongDescription ||
                    (this.LongDescription != null &&
                    this.LongDescription.Equals(input.LongDescription))
                ) && 
                (
                    this.IndexOrder == input.IndexOrder ||
                    (this.IndexOrder != null &&
                    this.IndexOrder.Equals(input.IndexOrder))
                ) && 
                (
                    this.Appearance == input.Appearance ||
                    (this.Appearance != null &&
                    this.Appearance.Equals(input.Appearance))
                ) && 
                (
                    this.Position == input.Position ||
                    (this.Position != null &&
                    this.Position.Equals(input.Position))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ShortDescription != null)
                    hashCode = hashCode * 59 + this.ShortDescription.GetHashCode();
                if (this.LongDescription != null)
                    hashCode = hashCode * 59 + this.LongDescription.GetHashCode();
                if (this.IndexOrder != null)
                    hashCode = hashCode * 59 + this.IndexOrder.GetHashCode();
                if (this.Appearance != null)
                    hashCode = hashCode * 59 + this.Appearance.GetHashCode();
                if (this.Position != null)
                    hashCode = hashCode * 59 + this.Position.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
