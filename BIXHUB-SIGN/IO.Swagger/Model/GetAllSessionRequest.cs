/* 
 * Sign
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;
namespace IO.Swagger.Model
{
    /// <summary>
    /// GetAllSessionRequest
    /// </summary>
    [DataContract]
        public partial class GetAllSessionRequest :  IEquatable<GetAllSessionRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetAllSessionRequest" /> class.
        /// </summary>
        /// <param name="businessUnitGuid">businessUnitGuid.</param>
        /// <param name="sessionGuid">sessionGuid.</param>
        /// <param name="process">process.</param>
        /// <param name="workFlow">workFlow.</param>
        /// <param name="sessionStatus">sessionStatus.</param>
        /// <param name="fromCreationDate">fromCreationDate.</param>
        /// <param name="toCreationDate">toCreationDate.</param>
        /// <param name="skip">skip.</param>
        /// <param name="take">take.</param>
        public GetAllSessionRequest(Guid? businessUnitGuid = default(Guid?), Guid? sessionGuid = default(Guid?), SignSessionProcessTypeDto process = default(SignSessionProcessTypeDto), WorkFlowType workFlow = default(WorkFlowType), SignSessionStatus sessionStatus = default(SignSessionStatus), DateTime? fromCreationDate = default(DateTime?), DateTime? toCreationDate = default(DateTime?), int? skip = default(int?), int? take = default(int?))
        {
            this.BusinessUnitGuid = businessUnitGuid;
            this.SessionGuid = sessionGuid;
            this.Process = process;
            this.WorkFlow = workFlow;
            this.SessionStatus = sessionStatus;
            this.FromCreationDate = fromCreationDate;
            this.ToCreationDate = toCreationDate;
            this.Skip = skip;
            this.Take = take;
        }
        
        /// <summary>
        /// Gets or Sets BusinessUnitGuid
        /// </summary>
        [DataMember(Name="businessUnitGuid", EmitDefaultValue=false)]
        public Guid? BusinessUnitGuid { get; set; }

        /// <summary>
        /// Gets or Sets SessionGuid
        /// </summary>
        [DataMember(Name="sessionGuid", EmitDefaultValue=false)]
        public Guid? SessionGuid { get; set; }

        /// <summary>
        /// Gets or Sets Process
        /// </summary>
        [DataMember(Name="process", EmitDefaultValue=false)]
        public SignSessionProcessTypeDto Process { get; set; }

        /// <summary>
        /// Gets or Sets WorkFlow
        /// </summary>
        [DataMember(Name="workFlow", EmitDefaultValue=false)]
        public WorkFlowType WorkFlow { get; set; }

        /// <summary>
        /// Gets or Sets SessionStatus
        /// </summary>
        [DataMember(Name="sessionStatus", EmitDefaultValue=false)]
        public SignSessionStatus SessionStatus { get; set; }

        /// <summary>
        /// Gets or Sets FromCreationDate
        /// </summary>
        [DataMember(Name="fromCreationDate", EmitDefaultValue=false)]
        public DateTime? FromCreationDate { get; set; }

        /// <summary>
        /// Gets or Sets ToCreationDate
        /// </summary>
        [DataMember(Name="toCreationDate", EmitDefaultValue=false)]
        public DateTime? ToCreationDate { get; set; }

        /// <summary>
        /// Gets or Sets Skip
        /// </summary>
        [DataMember(Name="skip", EmitDefaultValue=false)]
        public int? Skip { get; set; }

        /// <summary>
        /// Gets or Sets Take
        /// </summary>
        [DataMember(Name="take", EmitDefaultValue=false)]
        public int? Take { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetAllSessionRequest {\n");
            sb.Append("  BusinessUnitGuid: ").Append(BusinessUnitGuid).Append("\n");
            sb.Append("  SessionGuid: ").Append(SessionGuid).Append("\n");
            sb.Append("  Process: ").Append(Process).Append("\n");
            sb.Append("  WorkFlow: ").Append(WorkFlow).Append("\n");
            sb.Append("  SessionStatus: ").Append(SessionStatus).Append("\n");
            sb.Append("  FromCreationDate: ").Append(FromCreationDate).Append("\n");
            sb.Append("  ToCreationDate: ").Append(ToCreationDate).Append("\n");
            sb.Append("  Skip: ").Append(Skip).Append("\n");
            sb.Append("  Take: ").Append(Take).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetAllSessionRequest);
        }

        /// <summary>
        /// Returns true if GetAllSessionRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of GetAllSessionRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetAllSessionRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.BusinessUnitGuid == input.BusinessUnitGuid ||
                    (this.BusinessUnitGuid != null &&
                    this.BusinessUnitGuid.Equals(input.BusinessUnitGuid))
                ) && 
                (
                    this.SessionGuid == input.SessionGuid ||
                    (this.SessionGuid != null &&
                    this.SessionGuid.Equals(input.SessionGuid))
                ) && 
                (
                    this.Process == input.Process ||
                    (this.Process != null &&
                    this.Process.Equals(input.Process))
                ) && 
                (
                    this.WorkFlow == input.WorkFlow ||
                    (this.WorkFlow != null &&
                    this.WorkFlow.Equals(input.WorkFlow))
                ) && 
                (
                    this.SessionStatus == input.SessionStatus ||
                    (this.SessionStatus != null &&
                    this.SessionStatus.Equals(input.SessionStatus))
                ) && 
                (
                    this.FromCreationDate == input.FromCreationDate ||
                    (this.FromCreationDate != null &&
                    this.FromCreationDate.Equals(input.FromCreationDate))
                ) && 
                (
                    this.ToCreationDate == input.ToCreationDate ||
                    (this.ToCreationDate != null &&
                    this.ToCreationDate.Equals(input.ToCreationDate))
                ) && 
                (
                    this.Skip == input.Skip ||
                    (this.Skip != null &&
                    this.Skip.Equals(input.Skip))
                ) && 
                (
                    this.Take == input.Take ||
                    (this.Take != null &&
                    this.Take.Equals(input.Take))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BusinessUnitGuid != null)
                    hashCode = hashCode * 59 + this.BusinessUnitGuid.GetHashCode();
                if (this.SessionGuid != null)
                    hashCode = hashCode * 59 + this.SessionGuid.GetHashCode();
                if (this.Process != null)
                    hashCode = hashCode * 59 + this.Process.GetHashCode();
                if (this.WorkFlow != null)
                    hashCode = hashCode * 59 + this.WorkFlow.GetHashCode();
                if (this.SessionStatus != null)
                    hashCode = hashCode * 59 + this.SessionStatus.GetHashCode();
                if (this.FromCreationDate != null)
                    hashCode = hashCode * 59 + this.FromCreationDate.GetHashCode();
                if (this.ToCreationDate != null)
                    hashCode = hashCode * 59 + this.ToCreationDate.GetHashCode();
                if (this.Skip != null)
                    hashCode = hashCode * 59 + this.Skip.GetHashCode();
                if (this.Take != null)
                    hashCode = hashCode * 59 + this.Take.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
