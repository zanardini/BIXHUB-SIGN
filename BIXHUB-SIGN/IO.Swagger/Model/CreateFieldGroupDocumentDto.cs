/* 
 * Sign
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;
namespace IO.Swagger.Model
{
    /// <summary>
    /// CreateFieldGroupDocumentDto
    /// </summary>
    [DataContract]
        public partial class CreateFieldGroupDocumentDto :  IEquatable<CreateFieldGroupDocumentDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateFieldGroupDocumentDto" /> class.
        /// </summary>
        /// <param name="fileGuid">fileGuid (required).</param>
        /// <param name="indexOrder">indexOrder.</param>
        /// <param name="fields">fields.</param>
        public CreateFieldGroupDocumentDto(Guid? fileGuid = default(Guid?), float? indexOrder = default(float?), List<CreateFieldDto> fields = default(List<CreateFieldDto>))
        {
            // to ensure "fileGuid" is required (not null)
            if (fileGuid == null)
            {
                throw new InvalidDataException("fileGuid is a required property for CreateFieldGroupDocumentDto and cannot be null");
            }
            else
            {
                this.FileGuid = fileGuid;
            }
            this.IndexOrder = indexOrder;
            this.Fields = fields;
        }
        
        /// <summary>
        /// Gets or Sets FileGuid
        /// </summary>
        [DataMember(Name="fileGuid", EmitDefaultValue=false)]
        public Guid? FileGuid { get; set; }

        /// <summary>
        /// Gets or Sets IndexOrder
        /// </summary>
        [DataMember(Name="indexOrder", EmitDefaultValue=false)]
        public float? IndexOrder { get; set; }

        /// <summary>
        /// Gets or Sets Fields
        /// </summary>
        [DataMember(Name="fields", EmitDefaultValue=false)]
        public List<CreateFieldDto> Fields { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateFieldGroupDocumentDto {\n");
            sb.Append("  FileGuid: ").Append(FileGuid).Append("\n");
            sb.Append("  IndexOrder: ").Append(IndexOrder).Append("\n");
            sb.Append("  Fields: ").Append(Fields).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateFieldGroupDocumentDto);
        }

        /// <summary>
        /// Returns true if CreateFieldGroupDocumentDto instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateFieldGroupDocumentDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateFieldGroupDocumentDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.FileGuid == input.FileGuid ||
                    (this.FileGuid != null &&
                    this.FileGuid.Equals(input.FileGuid))
                ) && 
                (
                    this.IndexOrder == input.IndexOrder ||
                    (this.IndexOrder != null &&
                    this.IndexOrder.Equals(input.IndexOrder))
                ) && 
                (
                    this.Fields == input.Fields ||
                    this.Fields != null &&
                    input.Fields != null &&
                    this.Fields.SequenceEqual(input.Fields)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FileGuid != null)
                    hashCode = hashCode * 59 + this.FileGuid.GetHashCode();
                if (this.IndexOrder != null)
                    hashCode = hashCode * 59 + this.IndexOrder.GetHashCode();
                if (this.Fields != null)
                    hashCode = hashCode * 59 + this.Fields.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
