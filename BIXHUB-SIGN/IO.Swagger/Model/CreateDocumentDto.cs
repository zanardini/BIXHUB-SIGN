/* 
 * Sign
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;
namespace IO.Swagger.Model
{
    /// <summary>
    /// CreateDocumentDto
    /// </summary>
    [DataContract]
        public partial class CreateDocumentDto :  IEquatable<CreateDocumentDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateDocumentDto" /> class.
        /// </summary>
        /// <param name="description">description.</param>
        /// <param name="fileGuid">fileGuid (required).</param>
        /// <param name="sealPositions">sealPositions.</param>
        /// <param name="externalId">externalId.</param>
        /// <param name="mandatoryRead">mandatoryRead.</param>
        /// <param name="indexOrder">indexOrder.</param>
        public CreateDocumentDto(string description = default(string), Guid? fileGuid = default(Guid?), List<CreatePositionDto> sealPositions = default(List<CreatePositionDto>), string externalId = default(string), bool? mandatoryRead = default(bool?), float? indexOrder = default(float?))
        {
            // to ensure "fileGuid" is required (not null)
            if (fileGuid == null)
            {
                throw new InvalidDataException("fileGuid is a required property for CreateDocumentDto and cannot be null");
            }
            else
            {
                this.FileGuid = fileGuid;
            }
            this.Description = description;
            this.SealPositions = sealPositions;
            this.ExternalId = externalId;
            this.MandatoryRead = mandatoryRead;
            this.IndexOrder = indexOrder;
        }
        
        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets FileGuid
        /// </summary>
        [DataMember(Name="fileGuid", EmitDefaultValue=false)]
        public Guid? FileGuid { get; set; }

        /// <summary>
        /// Gets or Sets SealPositions
        /// </summary>
        [DataMember(Name="sealPositions", EmitDefaultValue=false)]
        public List<CreatePositionDto> SealPositions { get; set; }

        /// <summary>
        /// Gets or Sets ExternalId
        /// </summary>
        [DataMember(Name="externalId", EmitDefaultValue=false)]
        public string ExternalId { get; set; }

        /// <summary>
        /// Gets or Sets MandatoryRead
        /// </summary>
        [DataMember(Name="mandatoryRead", EmitDefaultValue=false)]
        public bool? MandatoryRead { get; set; }

        /// <summary>
        /// Gets or Sets IndexOrder
        /// </summary>
        [DataMember(Name="indexOrder", EmitDefaultValue=false)]
        public float? IndexOrder { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateDocumentDto {\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  FileGuid: ").Append(FileGuid).Append("\n");
            sb.Append("  SealPositions: ").Append(SealPositions).Append("\n");
            sb.Append("  ExternalId: ").Append(ExternalId).Append("\n");
            sb.Append("  MandatoryRead: ").Append(MandatoryRead).Append("\n");
            sb.Append("  IndexOrder: ").Append(IndexOrder).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateDocumentDto);
        }

        /// <summary>
        /// Returns true if CreateDocumentDto instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateDocumentDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateDocumentDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.FileGuid == input.FileGuid ||
                    (this.FileGuid != null &&
                    this.FileGuid.Equals(input.FileGuid))
                ) && 
                (
                    this.SealPositions == input.SealPositions ||
                    this.SealPositions != null &&
                    input.SealPositions != null &&
                    this.SealPositions.SequenceEqual(input.SealPositions)
                ) && 
                (
                    this.ExternalId == input.ExternalId ||
                    (this.ExternalId != null &&
                    this.ExternalId.Equals(input.ExternalId))
                ) && 
                (
                    this.MandatoryRead == input.MandatoryRead ||
                    (this.MandatoryRead != null &&
                    this.MandatoryRead.Equals(input.MandatoryRead))
                ) && 
                (
                    this.IndexOrder == input.IndexOrder ||
                    (this.IndexOrder != null &&
                    this.IndexOrder.Equals(input.IndexOrder))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.FileGuid != null)
                    hashCode = hashCode * 59 + this.FileGuid.GetHashCode();
                if (this.SealPositions != null)
                    hashCode = hashCode * 59 + this.SealPositions.GetHashCode();
                if (this.ExternalId != null)
                    hashCode = hashCode * 59 + this.ExternalId.GetHashCode();
                if (this.MandatoryRead != null)
                    hashCode = hashCode * 59 + this.MandatoryRead.GetHashCode();
                if (this.IndexOrder != null)
                    hashCode = hashCode * 59 + this.IndexOrder.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
