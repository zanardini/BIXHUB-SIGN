/* 
 * Sign
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface ISessionLifeCycleApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Guid?</returns>
        Guid? ApiV1SessionLifeCycleAddApproverSessionGuidPut (Guid? sessionGuid, CreateApproverDto body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Guid?</returns>
        ApiResponse<Guid?> ApiV1SessionLifeCycleAddApproverSessionGuidPutWithHttpInfo (Guid? sessionGuid, CreateApproverDto body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="documentGuid"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Guid?</returns>
        Guid? ApiV1SessionLifeCycleAddDocumentSealPositionSessionGuidDocumentGuidPut (Guid? sessionGuid, Guid? documentGuid, CreatePositionDto body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="documentGuid"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Guid?</returns>
        ApiResponse<Guid?> ApiV1SessionLifeCycleAddDocumentSealPositionSessionGuidDocumentGuidPutWithHttpInfo (Guid? sessionGuid, Guid? documentGuid, CreatePositionDto body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Guid?</returns>
        Guid? ApiV1SessionLifeCycleAddDocumentSessionGuidPut (Guid? sessionGuid, CreateDocumentDto body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Guid?</returns>
        ApiResponse<Guid?> ApiV1SessionLifeCycleAddDocumentSessionGuidPutWithHttpInfo (Guid? sessionGuid, CreateDocumentDto body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="signerGuid"></param>
        /// <param name="fieldGroupGuid"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Guid?</returns>
        Guid? ApiV1SessionLifeCycleAddDocumentToFieldGroupSessionGuidSignerGuidFieldGroupGuidPut (Guid? sessionGuid, Guid? signerGuid, Guid? fieldGroupGuid, CreateFieldGroupDocumentDto body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="signerGuid"></param>
        /// <param name="fieldGroupGuid"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Guid?</returns>
        ApiResponse<Guid?> ApiV1SessionLifeCycleAddDocumentToFieldGroupSessionGuidSignerGuidFieldGroupGuidPutWithHttpInfo (Guid? sessionGuid, Guid? signerGuid, Guid? fieldGroupGuid, CreateFieldGroupDocumentDto body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="signerGuid"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Guid?</returns>
        Guid? ApiV1SessionLifeCycleAddFieldGroupSessionGuidSignerGuidPut (Guid? sessionGuid, Guid? signerGuid, CreateFieldGroupDto body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="signerGuid"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Guid?</returns>
        ApiResponse<Guid?> ApiV1SessionLifeCycleAddFieldGroupSessionGuidSignerGuidPutWithHttpInfo (Guid? sessionGuid, Guid? signerGuid, CreateFieldGroupDto body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="signerGuid"></param>
        /// <param name="fieldGroupGuid"></param>
        /// <param name="documentGuid"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Guid?</returns>
        Guid? ApiV1SessionLifeCycleAddFieldSessionGuidSignerGuidFieldGroupGuidDocumentGuidPut (Guid? sessionGuid, Guid? signerGuid, Guid? fieldGroupGuid, Guid? documentGuid, CreateFieldDto body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="signerGuid"></param>
        /// <param name="fieldGroupGuid"></param>
        /// <param name="documentGuid"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Guid?</returns>
        ApiResponse<Guid?> ApiV1SessionLifeCycleAddFieldSessionGuidSignerGuidFieldGroupGuidDocumentGuidPutWithHttpInfo (Guid? sessionGuid, Guid? signerGuid, Guid? fieldGroupGuid, Guid? documentGuid, CreateFieldDto body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Guid?</returns>
        Guid? ApiV1SessionLifeCycleAddFollowerSessionGuidPut (Guid? sessionGuid, CreateFollowerDto body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Guid?</returns>
        ApiResponse<Guid?> ApiV1SessionLifeCycleAddFollowerSessionGuidPutWithHttpInfo (Guid? sessionGuid, CreateFollowerDto body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Guid?</returns>
        Guid? ApiV1SessionLifeCycleAddSignerSessionGuidPut (Guid? sessionGuid, CreateSignerDto body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Guid?</returns>
        ApiResponse<Guid?> ApiV1SessionLifeCycleAddSignerSessionGuidPutWithHttpInfo (Guid? sessionGuid, CreateSignerDto body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>CreateSessionResponse</returns>
        CreateSessionResponse ApiV1SessionLifeCycleCreatePost (CreateSessionRequest body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of CreateSessionResponse</returns>
        ApiResponse<CreateSessionResponse> ApiV1SessionLifeCycleCreatePostWithHttpInfo (CreateSessionRequest body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <returns></returns>
        void ApiV1SessionLifeCycleDeleteSessionGuidDelete (Guid? sessionGuid);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiV1SessionLifeCycleDeleteSessionGuidDeleteWithHttpInfo (Guid? sessionGuid);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>GetAllSessionResponseGetPaginatedListResponseExecuted</returns>
        GetAllSessionResponseGetPaginatedListResponseExecuted ApiV1SessionLifeCycleGetAllPost (GetAllSessionRequest body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of GetAllSessionResponseGetPaginatedListResponseExecuted</returns>
        ApiResponse<GetAllSessionResponseGetPaginatedListResponseExecuted> ApiV1SessionLifeCycleGetAllPostWithHttpInfo (GetAllSessionRequest body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="signerGuid"></param>
        /// <param name="attachmentGuid"></param>
        /// <returns>FileDataBase64</returns>
        FileDataBase64 ApiV1SessionLifeCycleGetAttachmentBase64SessionGuidSignerGuidAttachmentGuidGet (Guid? sessionGuid, Guid? signerGuid, Guid? attachmentGuid);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="signerGuid"></param>
        /// <param name="attachmentGuid"></param>
        /// <returns>ApiResponse of FileDataBase64</returns>
        ApiResponse<FileDataBase64> ApiV1SessionLifeCycleGetAttachmentBase64SessionGuidSignerGuidAttachmentGuidGetWithHttpInfo (Guid? sessionGuid, Guid? signerGuid, Guid? attachmentGuid);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="signerGuid"></param>
        /// <param name="attachmentGuid"></param>
        /// <returns>byte[]</returns>
        byte[] ApiV1SessionLifeCycleGetAttachmentSessionGuidSignerGuidAttachmentGuidGet (Guid? sessionGuid, Guid? signerGuid, Guid? attachmentGuid);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="signerGuid"></param>
        /// <param name="attachmentGuid"></param>
        /// <returns>ApiResponse of byte[]</returns>
        ApiResponse<byte[]> ApiV1SessionLifeCycleGetAttachmentSessionGuidSignerGuidAttachmentGuidGetWithHttpInfo (Guid? sessionGuid, Guid? signerGuid, Guid? attachmentGuid);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="signerGuid"></param>
        /// <returns>byte[]</returns>
        byte[] ApiV1SessionLifeCycleGetAuditTrailIdentificationSessionGuidSignerGuidGet (Guid? sessionGuid, Guid? signerGuid);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="signerGuid"></param>
        /// <returns>ApiResponse of byte[]</returns>
        ApiResponse<byte[]> ApiV1SessionLifeCycleGetAuditTrailIdentificationSessionGuidSignerGuidGetWithHttpInfo (Guid? sessionGuid, Guid? signerGuid);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <returns>byte[]</returns>
        byte[] ApiV1SessionLifeCycleGetAuditTrailSessionGuidGet (Guid? sessionGuid);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <returns>ApiResponse of byte[]</returns>
        ApiResponse<byte[]> ApiV1SessionLifeCycleGetAuditTrailSessionGuidGetWithHttpInfo (Guid? sessionGuid);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="take"> (optional)</param>
        /// <param name="skip"> (optional)</param>
        /// <returns>List&lt;GetErrorsSessionResponse&gt;</returns>
        List<GetErrorsSessionResponse> ApiV1SessionLifeCycleGetErrorsGet (int? take = null, int? skip = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="take"> (optional)</param>
        /// <param name="skip"> (optional)</param>
        /// <returns>ApiResponse of List&lt;GetErrorsSessionResponse&gt;</returns>
        ApiResponse<List<GetErrorsSessionResponse>> ApiV1SessionLifeCycleGetErrorsGetWithHttpInfo (int? take = null, int? skip = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <returns>GetSessionDetailResponse</returns>
        GetSessionDetailResponse ApiV1SessionLifeCycleGetSessionGuidGet (Guid? sessionGuid);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <returns>ApiResponse of GetSessionDetailResponse</returns>
        ApiResponse<GetSessionDetailResponse> ApiV1SessionLifeCycleGetSessionGuidGetWithHttpInfo (Guid? sessionGuid);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="documentGuid"></param>
        /// <returns>FileDataBase64</returns>
        FileDataBase64 ApiV1SessionLifeCycleGetSignedResultBase64SessionGuidDocumentGuidGet (Guid? sessionGuid, Guid? documentGuid);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="documentGuid"></param>
        /// <returns>ApiResponse of FileDataBase64</returns>
        ApiResponse<FileDataBase64> ApiV1SessionLifeCycleGetSignedResultBase64SessionGuidDocumentGuidGetWithHttpInfo (Guid? sessionGuid, Guid? documentGuid);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="documentGuid"></param>
        /// <returns>byte[]</returns>
        byte[] ApiV1SessionLifeCycleGetSignedResultSessionGuidDocumentGuidGet (Guid? sessionGuid, Guid? documentGuid);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="documentGuid"></param>
        /// <returns>ApiResponse of byte[]</returns>
        ApiResponse<byte[]> ApiV1SessionLifeCycleGetSignedResultSessionGuidDocumentGuidGetWithHttpInfo (Guid? sessionGuid, Guid? documentGuid);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>List&lt;GetStatusSessionResponse&gt;</returns>
        List<GetStatusSessionResponse> ApiV1SessionLifeCycleGetStatusPost (List<Guid?> body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of List&lt;GetStatusSessionResponse&gt;</returns>
        ApiResponse<List<GetStatusSessionResponse>> ApiV1SessionLifeCycleGetStatusPostWithHttpInfo (List<Guid?> body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void ApiV1SessionLifeCycleMarkErrorAsFixedSessionGuidPost (Guid? sessionGuid, FixErrorRequest body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiV1SessionLifeCycleMarkErrorAsFixedSessionGuidPostWithHttpInfo (Guid? sessionGuid, FixErrorRequest body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <returns>PublishSessionResponse</returns>
        PublishSessionResponse ApiV1SessionLifeCyclePublishSessionGuidPost (Guid? sessionGuid);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <returns>ApiResponse of PublishSessionResponse</returns>
        ApiResponse<PublishSessionResponse> ApiV1SessionLifeCyclePublishSessionGuidPostWithHttpInfo (Guid? sessionGuid);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="approverGuid"></param>
        /// <returns></returns>
        void ApiV1SessionLifeCycleRemoveApproverSessionGuidApproverGuidDelete (Guid? sessionGuid, Guid? approverGuid);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="approverGuid"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiV1SessionLifeCycleRemoveApproverSessionGuidApproverGuidDeleteWithHttpInfo (Guid? sessionGuid, Guid? approverGuid);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="signerGuid"></param>
        /// <param name="fieldGroupGuid"></param>
        /// <param name="documentGuid"></param>
        /// <returns></returns>
        void ApiV1SessionLifeCycleRemoveDocumentFromFieldGroupSessionGuidSignerGuidFieldGroupGuidDocumentGuidDelete (Guid? sessionGuid, Guid? signerGuid, Guid? fieldGroupGuid, Guid? documentGuid);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="signerGuid"></param>
        /// <param name="fieldGroupGuid"></param>
        /// <param name="documentGuid"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiV1SessionLifeCycleRemoveDocumentFromFieldGroupSessionGuidSignerGuidFieldGroupGuidDocumentGuidDeleteWithHttpInfo (Guid? sessionGuid, Guid? signerGuid, Guid? fieldGroupGuid, Guid? documentGuid);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="documentGuid"></param>
        /// <param name="documentSealPositionGuid"></param>
        /// <returns></returns>
        void ApiV1SessionLifeCycleRemoveDocumentSealPositionSessionGuidDocumentGuidDocumentSealPositionGuidDelete (Guid? sessionGuid, Guid? documentGuid, Guid? documentSealPositionGuid);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="documentGuid"></param>
        /// <param name="documentSealPositionGuid"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiV1SessionLifeCycleRemoveDocumentSealPositionSessionGuidDocumentGuidDocumentSealPositionGuidDeleteWithHttpInfo (Guid? sessionGuid, Guid? documentGuid, Guid? documentSealPositionGuid);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="documentGuid"></param>
        /// <returns></returns>
        void ApiV1SessionLifeCycleRemoveDocumentSessionGuidDocumentGuidDelete (Guid? sessionGuid, Guid? documentGuid);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="documentGuid"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiV1SessionLifeCycleRemoveDocumentSessionGuidDocumentGuidDeleteWithHttpInfo (Guid? sessionGuid, Guid? documentGuid);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="signerGuid"></param>
        /// <param name="fieldGroupGuid"></param>
        /// <returns></returns>
        void ApiV1SessionLifeCycleRemoveFieldGroupSessionGuidSignerGuidFieldGroupGuidDelete (Guid? sessionGuid, Guid? signerGuid, Guid? fieldGroupGuid);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="signerGuid"></param>
        /// <param name="fieldGroupGuid"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiV1SessionLifeCycleRemoveFieldGroupSessionGuidSignerGuidFieldGroupGuidDeleteWithHttpInfo (Guid? sessionGuid, Guid? signerGuid, Guid? fieldGroupGuid);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void ApiV1SessionLifeCycleRemoveFieldPost (RemoveFieldRequest body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiV1SessionLifeCycleRemoveFieldPostWithHttpInfo (RemoveFieldRequest body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="followerGuid"></param>
        /// <returns></returns>
        void ApiV1SessionLifeCycleRemoveFollowerSessionGuidFollowerGuidDelete (Guid? sessionGuid, Guid? followerGuid);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="followerGuid"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiV1SessionLifeCycleRemoveFollowerSessionGuidFollowerGuidDeleteWithHttpInfo (Guid? sessionGuid, Guid? followerGuid);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="signerGuid"></param>
        /// <returns></returns>
        void ApiV1SessionLifeCycleRemoveSignerSessionGuidSignerGuidDelete (Guid? sessionGuid, Guid? signerGuid);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="signerGuid"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiV1SessionLifeCycleRemoveSignerSessionGuidSignerGuidDeleteWithHttpInfo (Guid? sessionGuid, Guid? signerGuid);
        /// <summary>
        /// Send an email with the link to activate the identification session
        /// </summary>
        /// <remarks>
        /// Send an email with the link to activate the identification session
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ActorType</returns>
        ActorType ApiV1SessionLifeCycleSendEmailSessionGuidPost (Guid? sessionGuid, SendEmailRequest body = null);

        /// <summary>
        /// Send an email with the link to activate the identification session
        /// </summary>
        /// <remarks>
        /// Send an email with the link to activate the identification session
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ActorType</returns>
        ApiResponse<ActorType> ApiV1SessionLifeCycleSendEmailSessionGuidPostWithHttpInfo (Guid? sessionGuid, SendEmailRequest body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void ApiV1SessionLifeCycleUpdateSessionGuidPatch (Guid? sessionGuid, UpdateSessionRequest body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiV1SessionLifeCycleUpdateSessionGuidPatchWithHttpInfo (Guid? sessionGuid, UpdateSessionRequest body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>SavedFileResponse</returns>
        SavedFileResponse ApiV1SessionLifeCycleUploadFileBase64Post (UploadFileBase64Request body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of SavedFileResponse</returns>
        ApiResponse<SavedFileResponse> ApiV1SessionLifeCycleUploadFileBase64PostWithHttpInfo (UploadFileBase64Request body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"> (optional)</param>
        /// <returns>SavedFileResponse</returns>
        SavedFileResponse ApiV1SessionLifeCycleUploadFilePost (byte[] file = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"> (optional)</param>
        /// <returns>ApiResponse of SavedFileResponse</returns>
        ApiResponse<SavedFileResponse> ApiV1SessionLifeCycleUploadFilePostWithHttpInfo (byte[] file = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>List&lt;SavedFileResponse&gt;</returns>
        List<SavedFileResponse> ApiV1SessionLifeCycleUploadFilesBase64Post (UploadFilesRequest body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of List&lt;SavedFileResponse&gt;</returns>
        ApiResponse<List<SavedFileResponse>> ApiV1SessionLifeCycleUploadFilesBase64PostWithHttpInfo (UploadFilesRequest body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="files"> (optional)</param>
        /// <returns>List&lt;SavedFileResponse&gt;</returns>
        List<SavedFileResponse> ApiV1SessionLifeCycleUploadFilesPost (List<byte[]> files = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="files"> (optional)</param>
        /// <returns>ApiResponse of List&lt;SavedFileResponse&gt;</returns>
        ApiResponse<List<SavedFileResponse>> ApiV1SessionLifeCycleUploadFilesPostWithHttpInfo (List<byte[]> files = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of Guid?</returns>
        System.Threading.Tasks.Task<Guid?> ApiV1SessionLifeCycleAddApproverSessionGuidPutAsync (Guid? sessionGuid, CreateApproverDto body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (Guid?)</returns>
        System.Threading.Tasks.Task<ApiResponse<Guid?>> ApiV1SessionLifeCycleAddApproverSessionGuidPutAsyncWithHttpInfo (Guid? sessionGuid, CreateApproverDto body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="documentGuid"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of Guid?</returns>
        System.Threading.Tasks.Task<Guid?> ApiV1SessionLifeCycleAddDocumentSealPositionSessionGuidDocumentGuidPutAsync (Guid? sessionGuid, Guid? documentGuid, CreatePositionDto body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="documentGuid"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (Guid?)</returns>
        System.Threading.Tasks.Task<ApiResponse<Guid?>> ApiV1SessionLifeCycleAddDocumentSealPositionSessionGuidDocumentGuidPutAsyncWithHttpInfo (Guid? sessionGuid, Guid? documentGuid, CreatePositionDto body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of Guid?</returns>
        System.Threading.Tasks.Task<Guid?> ApiV1SessionLifeCycleAddDocumentSessionGuidPutAsync (Guid? sessionGuid, CreateDocumentDto body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (Guid?)</returns>
        System.Threading.Tasks.Task<ApiResponse<Guid?>> ApiV1SessionLifeCycleAddDocumentSessionGuidPutAsyncWithHttpInfo (Guid? sessionGuid, CreateDocumentDto body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="signerGuid"></param>
        /// <param name="fieldGroupGuid"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of Guid?</returns>
        System.Threading.Tasks.Task<Guid?> ApiV1SessionLifeCycleAddDocumentToFieldGroupSessionGuidSignerGuidFieldGroupGuidPutAsync (Guid? sessionGuid, Guid? signerGuid, Guid? fieldGroupGuid, CreateFieldGroupDocumentDto body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="signerGuid"></param>
        /// <param name="fieldGroupGuid"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (Guid?)</returns>
        System.Threading.Tasks.Task<ApiResponse<Guid?>> ApiV1SessionLifeCycleAddDocumentToFieldGroupSessionGuidSignerGuidFieldGroupGuidPutAsyncWithHttpInfo (Guid? sessionGuid, Guid? signerGuid, Guid? fieldGroupGuid, CreateFieldGroupDocumentDto body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="signerGuid"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of Guid?</returns>
        System.Threading.Tasks.Task<Guid?> ApiV1SessionLifeCycleAddFieldGroupSessionGuidSignerGuidPutAsync (Guid? sessionGuid, Guid? signerGuid, CreateFieldGroupDto body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="signerGuid"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (Guid?)</returns>
        System.Threading.Tasks.Task<ApiResponse<Guid?>> ApiV1SessionLifeCycleAddFieldGroupSessionGuidSignerGuidPutAsyncWithHttpInfo (Guid? sessionGuid, Guid? signerGuid, CreateFieldGroupDto body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="signerGuid"></param>
        /// <param name="fieldGroupGuid"></param>
        /// <param name="documentGuid"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of Guid?</returns>
        System.Threading.Tasks.Task<Guid?> ApiV1SessionLifeCycleAddFieldSessionGuidSignerGuidFieldGroupGuidDocumentGuidPutAsync (Guid? sessionGuid, Guid? signerGuid, Guid? fieldGroupGuid, Guid? documentGuid, CreateFieldDto body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="signerGuid"></param>
        /// <param name="fieldGroupGuid"></param>
        /// <param name="documentGuid"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (Guid?)</returns>
        System.Threading.Tasks.Task<ApiResponse<Guid?>> ApiV1SessionLifeCycleAddFieldSessionGuidSignerGuidFieldGroupGuidDocumentGuidPutAsyncWithHttpInfo (Guid? sessionGuid, Guid? signerGuid, Guid? fieldGroupGuid, Guid? documentGuid, CreateFieldDto body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of Guid?</returns>
        System.Threading.Tasks.Task<Guid?> ApiV1SessionLifeCycleAddFollowerSessionGuidPutAsync (Guid? sessionGuid, CreateFollowerDto body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (Guid?)</returns>
        System.Threading.Tasks.Task<ApiResponse<Guid?>> ApiV1SessionLifeCycleAddFollowerSessionGuidPutAsyncWithHttpInfo (Guid? sessionGuid, CreateFollowerDto body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of Guid?</returns>
        System.Threading.Tasks.Task<Guid?> ApiV1SessionLifeCycleAddSignerSessionGuidPutAsync (Guid? sessionGuid, CreateSignerDto body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (Guid?)</returns>
        System.Threading.Tasks.Task<ApiResponse<Guid?>> ApiV1SessionLifeCycleAddSignerSessionGuidPutAsyncWithHttpInfo (Guid? sessionGuid, CreateSignerDto body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of CreateSessionResponse</returns>
        System.Threading.Tasks.Task<CreateSessionResponse> ApiV1SessionLifeCycleCreatePostAsync (CreateSessionRequest body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (CreateSessionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateSessionResponse>> ApiV1SessionLifeCycleCreatePostAsyncWithHttpInfo (CreateSessionRequest body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiV1SessionLifeCycleDeleteSessionGuidDeleteAsync (Guid? sessionGuid);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiV1SessionLifeCycleDeleteSessionGuidDeleteAsyncWithHttpInfo (Guid? sessionGuid);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of GetAllSessionResponseGetPaginatedListResponseExecuted</returns>
        System.Threading.Tasks.Task<GetAllSessionResponseGetPaginatedListResponseExecuted> ApiV1SessionLifeCycleGetAllPostAsync (GetAllSessionRequest body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (GetAllSessionResponseGetPaginatedListResponseExecuted)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetAllSessionResponseGetPaginatedListResponseExecuted>> ApiV1SessionLifeCycleGetAllPostAsyncWithHttpInfo (GetAllSessionRequest body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="signerGuid"></param>
        /// <param name="attachmentGuid"></param>
        /// <returns>Task of FileDataBase64</returns>
        System.Threading.Tasks.Task<FileDataBase64> ApiV1SessionLifeCycleGetAttachmentBase64SessionGuidSignerGuidAttachmentGuidGetAsync (Guid? sessionGuid, Guid? signerGuid, Guid? attachmentGuid);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="signerGuid"></param>
        /// <param name="attachmentGuid"></param>
        /// <returns>Task of ApiResponse (FileDataBase64)</returns>
        System.Threading.Tasks.Task<ApiResponse<FileDataBase64>> ApiV1SessionLifeCycleGetAttachmentBase64SessionGuidSignerGuidAttachmentGuidGetAsyncWithHttpInfo (Guid? sessionGuid, Guid? signerGuid, Guid? attachmentGuid);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="signerGuid"></param>
        /// <param name="attachmentGuid"></param>
        /// <returns>Task of byte[]</returns>
        System.Threading.Tasks.Task<byte[]> ApiV1SessionLifeCycleGetAttachmentSessionGuidSignerGuidAttachmentGuidGetAsync (Guid? sessionGuid, Guid? signerGuid, Guid? attachmentGuid);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="signerGuid"></param>
        /// <param name="attachmentGuid"></param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        System.Threading.Tasks.Task<ApiResponse<byte[]>> ApiV1SessionLifeCycleGetAttachmentSessionGuidSignerGuidAttachmentGuidGetAsyncWithHttpInfo (Guid? sessionGuid, Guid? signerGuid, Guid? attachmentGuid);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="signerGuid"></param>
        /// <returns>Task of byte[]</returns>
        System.Threading.Tasks.Task<byte[]> ApiV1SessionLifeCycleGetAuditTrailIdentificationSessionGuidSignerGuidGetAsync (Guid? sessionGuid, Guid? signerGuid);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="signerGuid"></param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        System.Threading.Tasks.Task<ApiResponse<byte[]>> ApiV1SessionLifeCycleGetAuditTrailIdentificationSessionGuidSignerGuidGetAsyncWithHttpInfo (Guid? sessionGuid, Guid? signerGuid);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <returns>Task of byte[]</returns>
        System.Threading.Tasks.Task<byte[]> ApiV1SessionLifeCycleGetAuditTrailSessionGuidGetAsync (Guid? sessionGuid);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        System.Threading.Tasks.Task<ApiResponse<byte[]>> ApiV1SessionLifeCycleGetAuditTrailSessionGuidGetAsyncWithHttpInfo (Guid? sessionGuid);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="take"> (optional)</param>
        /// <param name="skip"> (optional)</param>
        /// <returns>Task of List&lt;GetErrorsSessionResponse&gt;</returns>
        System.Threading.Tasks.Task<List<GetErrorsSessionResponse>> ApiV1SessionLifeCycleGetErrorsGetAsync (int? take = null, int? skip = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="take"> (optional)</param>
        /// <param name="skip"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;GetErrorsSessionResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<GetErrorsSessionResponse>>> ApiV1SessionLifeCycleGetErrorsGetAsyncWithHttpInfo (int? take = null, int? skip = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <returns>Task of GetSessionDetailResponse</returns>
        System.Threading.Tasks.Task<GetSessionDetailResponse> ApiV1SessionLifeCycleGetSessionGuidGetAsync (Guid? sessionGuid);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <returns>Task of ApiResponse (GetSessionDetailResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetSessionDetailResponse>> ApiV1SessionLifeCycleGetSessionGuidGetAsyncWithHttpInfo (Guid? sessionGuid);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="documentGuid"></param>
        /// <returns>Task of FileDataBase64</returns>
        System.Threading.Tasks.Task<FileDataBase64> ApiV1SessionLifeCycleGetSignedResultBase64SessionGuidDocumentGuidGetAsync (Guid? sessionGuid, Guid? documentGuid);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="documentGuid"></param>
        /// <returns>Task of ApiResponse (FileDataBase64)</returns>
        System.Threading.Tasks.Task<ApiResponse<FileDataBase64>> ApiV1SessionLifeCycleGetSignedResultBase64SessionGuidDocumentGuidGetAsyncWithHttpInfo (Guid? sessionGuid, Guid? documentGuid);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="documentGuid"></param>
        /// <returns>Task of byte[]</returns>
        System.Threading.Tasks.Task<byte[]> ApiV1SessionLifeCycleGetSignedResultSessionGuidDocumentGuidGetAsync (Guid? sessionGuid, Guid? documentGuid);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="documentGuid"></param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        System.Threading.Tasks.Task<ApiResponse<byte[]>> ApiV1SessionLifeCycleGetSignedResultSessionGuidDocumentGuidGetAsyncWithHttpInfo (Guid? sessionGuid, Guid? documentGuid);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of List&lt;GetStatusSessionResponse&gt;</returns>
        System.Threading.Tasks.Task<List<GetStatusSessionResponse>> ApiV1SessionLifeCycleGetStatusPostAsync (List<Guid?> body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;GetStatusSessionResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<GetStatusSessionResponse>>> ApiV1SessionLifeCycleGetStatusPostAsyncWithHttpInfo (List<Guid?> body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiV1SessionLifeCycleMarkErrorAsFixedSessionGuidPostAsync (Guid? sessionGuid, FixErrorRequest body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiV1SessionLifeCycleMarkErrorAsFixedSessionGuidPostAsyncWithHttpInfo (Guid? sessionGuid, FixErrorRequest body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <returns>Task of PublishSessionResponse</returns>
        System.Threading.Tasks.Task<PublishSessionResponse> ApiV1SessionLifeCyclePublishSessionGuidPostAsync (Guid? sessionGuid);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <returns>Task of ApiResponse (PublishSessionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PublishSessionResponse>> ApiV1SessionLifeCyclePublishSessionGuidPostAsyncWithHttpInfo (Guid? sessionGuid);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="approverGuid"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiV1SessionLifeCycleRemoveApproverSessionGuidApproverGuidDeleteAsync (Guid? sessionGuid, Guid? approverGuid);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="approverGuid"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiV1SessionLifeCycleRemoveApproverSessionGuidApproverGuidDeleteAsyncWithHttpInfo (Guid? sessionGuid, Guid? approverGuid);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="signerGuid"></param>
        /// <param name="fieldGroupGuid"></param>
        /// <param name="documentGuid"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiV1SessionLifeCycleRemoveDocumentFromFieldGroupSessionGuidSignerGuidFieldGroupGuidDocumentGuidDeleteAsync (Guid? sessionGuid, Guid? signerGuid, Guid? fieldGroupGuid, Guid? documentGuid);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="signerGuid"></param>
        /// <param name="fieldGroupGuid"></param>
        /// <param name="documentGuid"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiV1SessionLifeCycleRemoveDocumentFromFieldGroupSessionGuidSignerGuidFieldGroupGuidDocumentGuidDeleteAsyncWithHttpInfo (Guid? sessionGuid, Guid? signerGuid, Guid? fieldGroupGuid, Guid? documentGuid);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="documentGuid"></param>
        /// <param name="documentSealPositionGuid"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiV1SessionLifeCycleRemoveDocumentSealPositionSessionGuidDocumentGuidDocumentSealPositionGuidDeleteAsync (Guid? sessionGuid, Guid? documentGuid, Guid? documentSealPositionGuid);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="documentGuid"></param>
        /// <param name="documentSealPositionGuid"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiV1SessionLifeCycleRemoveDocumentSealPositionSessionGuidDocumentGuidDocumentSealPositionGuidDeleteAsyncWithHttpInfo (Guid? sessionGuid, Guid? documentGuid, Guid? documentSealPositionGuid);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="documentGuid"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiV1SessionLifeCycleRemoveDocumentSessionGuidDocumentGuidDeleteAsync (Guid? sessionGuid, Guid? documentGuid);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="documentGuid"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiV1SessionLifeCycleRemoveDocumentSessionGuidDocumentGuidDeleteAsyncWithHttpInfo (Guid? sessionGuid, Guid? documentGuid);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="signerGuid"></param>
        /// <param name="fieldGroupGuid"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiV1SessionLifeCycleRemoveFieldGroupSessionGuidSignerGuidFieldGroupGuidDeleteAsync (Guid? sessionGuid, Guid? signerGuid, Guid? fieldGroupGuid);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="signerGuid"></param>
        /// <param name="fieldGroupGuid"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiV1SessionLifeCycleRemoveFieldGroupSessionGuidSignerGuidFieldGroupGuidDeleteAsyncWithHttpInfo (Guid? sessionGuid, Guid? signerGuid, Guid? fieldGroupGuid);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiV1SessionLifeCycleRemoveFieldPostAsync (RemoveFieldRequest body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiV1SessionLifeCycleRemoveFieldPostAsyncWithHttpInfo (RemoveFieldRequest body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="followerGuid"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiV1SessionLifeCycleRemoveFollowerSessionGuidFollowerGuidDeleteAsync (Guid? sessionGuid, Guid? followerGuid);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="followerGuid"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiV1SessionLifeCycleRemoveFollowerSessionGuidFollowerGuidDeleteAsyncWithHttpInfo (Guid? sessionGuid, Guid? followerGuid);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="signerGuid"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiV1SessionLifeCycleRemoveSignerSessionGuidSignerGuidDeleteAsync (Guid? sessionGuid, Guid? signerGuid);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="signerGuid"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiV1SessionLifeCycleRemoveSignerSessionGuidSignerGuidDeleteAsyncWithHttpInfo (Guid? sessionGuid, Guid? signerGuid);
        /// <summary>
        /// Send an email with the link to activate the identification session
        /// </summary>
        /// <remarks>
        /// Send an email with the link to activate the identification session
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ActorType</returns>
        System.Threading.Tasks.Task<ActorType> ApiV1SessionLifeCycleSendEmailSessionGuidPostAsync (Guid? sessionGuid, SendEmailRequest body = null);

        /// <summary>
        /// Send an email with the link to activate the identification session
        /// </summary>
        /// <remarks>
        /// Send an email with the link to activate the identification session
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ActorType)</returns>
        System.Threading.Tasks.Task<ApiResponse<ActorType>> ApiV1SessionLifeCycleSendEmailSessionGuidPostAsyncWithHttpInfo (Guid? sessionGuid, SendEmailRequest body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiV1SessionLifeCycleUpdateSessionGuidPatchAsync (Guid? sessionGuid, UpdateSessionRequest body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiV1SessionLifeCycleUpdateSessionGuidPatchAsyncWithHttpInfo (Guid? sessionGuid, UpdateSessionRequest body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of SavedFileResponse</returns>
        System.Threading.Tasks.Task<SavedFileResponse> ApiV1SessionLifeCycleUploadFileBase64PostAsync (UploadFileBase64Request body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (SavedFileResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SavedFileResponse>> ApiV1SessionLifeCycleUploadFileBase64PostAsyncWithHttpInfo (UploadFileBase64Request body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"> (optional)</param>
        /// <returns>Task of SavedFileResponse</returns>
        System.Threading.Tasks.Task<SavedFileResponse> ApiV1SessionLifeCycleUploadFilePostAsync (byte[] file = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"> (optional)</param>
        /// <returns>Task of ApiResponse (SavedFileResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SavedFileResponse>> ApiV1SessionLifeCycleUploadFilePostAsyncWithHttpInfo (byte[] file = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of List&lt;SavedFileResponse&gt;</returns>
        System.Threading.Tasks.Task<List<SavedFileResponse>> ApiV1SessionLifeCycleUploadFilesBase64PostAsync (UploadFilesRequest body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;SavedFileResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SavedFileResponse>>> ApiV1SessionLifeCycleUploadFilesBase64PostAsyncWithHttpInfo (UploadFilesRequest body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="files"> (optional)</param>
        /// <returns>Task of List&lt;SavedFileResponse&gt;</returns>
        System.Threading.Tasks.Task<List<SavedFileResponse>> ApiV1SessionLifeCycleUploadFilesPostAsync (List<byte[]> files = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="files"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;SavedFileResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SavedFileResponse>>> ApiV1SessionLifeCycleUploadFilesPostAsyncWithHttpInfo (List<byte[]> files = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class SessionLifeCycleApi : ISessionLifeCycleApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SessionLifeCycleApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SessionLifeCycleApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SessionLifeCycleApi"/> class
        /// </summary>
        /// <returns></returns>
        public SessionLifeCycleApi()
        {
            this.Configuration = IO.Swagger.Client.Configuration.Default;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SessionLifeCycleApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SessionLifeCycleApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Guid?</returns>
        public Guid? ApiV1SessionLifeCycleAddApproverSessionGuidPut (Guid? sessionGuid, CreateApproverDto body = null)
        {
             ApiResponse<Guid?> localVarResponse = ApiV1SessionLifeCycleAddApproverSessionGuidPutWithHttpInfo(sessionGuid, body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Guid?</returns>
        public ApiResponse< Guid? > ApiV1SessionLifeCycleAddApproverSessionGuidPutWithHttpInfo (Guid? sessionGuid, CreateApproverDto body = null)
        {
            // verify the required parameter 'sessionGuid' is set
            if (sessionGuid == null)
                throw new ApiException(400, "Missing required parameter 'sessionGuid' when calling SessionLifeCycleApi->ApiV1SessionLifeCycleAddApproverSessionGuidPut");

            var localVarPath = "/api/v1/SessionLifeCycle/AddApprover/{sessionGuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; x-api-version=1.0", 
                "text/json; x-api-version=1.0", 
                "application/_*+json; x-api-version=1.0"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain; x-api-version=1.0",
                "application/json; x-api-version=1.0",
                "text/json; x-api-version=1.0"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sessionGuid != null) localVarPathParams.Add("sessionGuid", this.Configuration.ApiClient.ParameterToString(sessionGuid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Bearer) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1SessionLifeCycleAddApproverSessionGuidPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Guid?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Guid?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Guid?)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of Guid?</returns>
        public async System.Threading.Tasks.Task<Guid?> ApiV1SessionLifeCycleAddApproverSessionGuidPutAsync (Guid? sessionGuid, CreateApproverDto body = null)
        {
             ApiResponse<Guid?> localVarResponse = await ApiV1SessionLifeCycleAddApproverSessionGuidPutAsyncWithHttpInfo(sessionGuid, body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (Guid?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Guid?>> ApiV1SessionLifeCycleAddApproverSessionGuidPutAsyncWithHttpInfo (Guid? sessionGuid, CreateApproverDto body = null)
        {
            // verify the required parameter 'sessionGuid' is set
            if (sessionGuid == null)
                throw new ApiException(400, "Missing required parameter 'sessionGuid' when calling SessionLifeCycleApi->ApiV1SessionLifeCycleAddApproverSessionGuidPut");

            var localVarPath = "/api/v1/SessionLifeCycle/AddApprover/{sessionGuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; x-api-version=1.0", 
                "text/json; x-api-version=1.0", 
                "application/_*+json; x-api-version=1.0"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain; x-api-version=1.0",
                "application/json; x-api-version=1.0",
                "text/json; x-api-version=1.0"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sessionGuid != null) localVarPathParams.Add("sessionGuid", this.Configuration.ApiClient.ParameterToString(sessionGuid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Bearer) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1SessionLifeCycleAddApproverSessionGuidPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Guid?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Guid?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Guid?)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="documentGuid"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Guid?</returns>
        public Guid? ApiV1SessionLifeCycleAddDocumentSealPositionSessionGuidDocumentGuidPut (Guid? sessionGuid, Guid? documentGuid, CreatePositionDto body = null)
        {
             ApiResponse<Guid?> localVarResponse = ApiV1SessionLifeCycleAddDocumentSealPositionSessionGuidDocumentGuidPutWithHttpInfo(sessionGuid, documentGuid, body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="documentGuid"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Guid?</returns>
        public ApiResponse< Guid? > ApiV1SessionLifeCycleAddDocumentSealPositionSessionGuidDocumentGuidPutWithHttpInfo (Guid? sessionGuid, Guid? documentGuid, CreatePositionDto body = null)
        {
            // verify the required parameter 'sessionGuid' is set
            if (sessionGuid == null)
                throw new ApiException(400, "Missing required parameter 'sessionGuid' when calling SessionLifeCycleApi->ApiV1SessionLifeCycleAddDocumentSealPositionSessionGuidDocumentGuidPut");
            // verify the required parameter 'documentGuid' is set
            if (documentGuid == null)
                throw new ApiException(400, "Missing required parameter 'documentGuid' when calling SessionLifeCycleApi->ApiV1SessionLifeCycleAddDocumentSealPositionSessionGuidDocumentGuidPut");

            var localVarPath = "/api/v1/SessionLifeCycle/AddDocumentSealPosition/{sessionGuid}/{documentGuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; x-api-version=1.0", 
                "text/json; x-api-version=1.0", 
                "application/_*+json; x-api-version=1.0"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain; x-api-version=1.0",
                "application/json; x-api-version=1.0",
                "text/json; x-api-version=1.0"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sessionGuid != null) localVarPathParams.Add("sessionGuid", this.Configuration.ApiClient.ParameterToString(sessionGuid)); // path parameter
            if (documentGuid != null) localVarPathParams.Add("documentGuid", this.Configuration.ApiClient.ParameterToString(documentGuid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Bearer) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1SessionLifeCycleAddDocumentSealPositionSessionGuidDocumentGuidPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Guid?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Guid?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Guid?)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="documentGuid"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of Guid?</returns>
        public async System.Threading.Tasks.Task<Guid?> ApiV1SessionLifeCycleAddDocumentSealPositionSessionGuidDocumentGuidPutAsync (Guid? sessionGuid, Guid? documentGuid, CreatePositionDto body = null)
        {
             ApiResponse<Guid?> localVarResponse = await ApiV1SessionLifeCycleAddDocumentSealPositionSessionGuidDocumentGuidPutAsyncWithHttpInfo(sessionGuid, documentGuid, body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="documentGuid"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (Guid?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Guid?>> ApiV1SessionLifeCycleAddDocumentSealPositionSessionGuidDocumentGuidPutAsyncWithHttpInfo (Guid? sessionGuid, Guid? documentGuid, CreatePositionDto body = null)
        {
            // verify the required parameter 'sessionGuid' is set
            if (sessionGuid == null)
                throw new ApiException(400, "Missing required parameter 'sessionGuid' when calling SessionLifeCycleApi->ApiV1SessionLifeCycleAddDocumentSealPositionSessionGuidDocumentGuidPut");
            // verify the required parameter 'documentGuid' is set
            if (documentGuid == null)
                throw new ApiException(400, "Missing required parameter 'documentGuid' when calling SessionLifeCycleApi->ApiV1SessionLifeCycleAddDocumentSealPositionSessionGuidDocumentGuidPut");

            var localVarPath = "/api/v1/SessionLifeCycle/AddDocumentSealPosition/{sessionGuid}/{documentGuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; x-api-version=1.0", 
                "text/json; x-api-version=1.0", 
                "application/_*+json; x-api-version=1.0"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain; x-api-version=1.0",
                "application/json; x-api-version=1.0",
                "text/json; x-api-version=1.0"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sessionGuid != null) localVarPathParams.Add("sessionGuid", this.Configuration.ApiClient.ParameterToString(sessionGuid)); // path parameter
            if (documentGuid != null) localVarPathParams.Add("documentGuid", this.Configuration.ApiClient.ParameterToString(documentGuid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Bearer) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1SessionLifeCycleAddDocumentSealPositionSessionGuidDocumentGuidPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Guid?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Guid?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Guid?)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Guid?</returns>
        public Guid? ApiV1SessionLifeCycleAddDocumentSessionGuidPut (Guid? sessionGuid, CreateDocumentDto body = null)
        {
             ApiResponse<Guid?> localVarResponse = ApiV1SessionLifeCycleAddDocumentSessionGuidPutWithHttpInfo(sessionGuid, body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Guid?</returns>
        public ApiResponse< Guid? > ApiV1SessionLifeCycleAddDocumentSessionGuidPutWithHttpInfo (Guid? sessionGuid, CreateDocumentDto body = null)
        {
            // verify the required parameter 'sessionGuid' is set
            if (sessionGuid == null)
                throw new ApiException(400, "Missing required parameter 'sessionGuid' when calling SessionLifeCycleApi->ApiV1SessionLifeCycleAddDocumentSessionGuidPut");

            var localVarPath = "/api/v1/SessionLifeCycle/AddDocument/{sessionGuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; x-api-version=1.0", 
                "text/json; x-api-version=1.0", 
                "application/_*+json; x-api-version=1.0"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain; x-api-version=1.0",
                "application/json; x-api-version=1.0",
                "text/json; x-api-version=1.0"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sessionGuid != null) localVarPathParams.Add("sessionGuid", this.Configuration.ApiClient.ParameterToString(sessionGuid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Bearer) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1SessionLifeCycleAddDocumentSessionGuidPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Guid?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Guid?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Guid?)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of Guid?</returns>
        public async System.Threading.Tasks.Task<Guid?> ApiV1SessionLifeCycleAddDocumentSessionGuidPutAsync (Guid? sessionGuid, CreateDocumentDto body = null)
        {
             ApiResponse<Guid?> localVarResponse = await ApiV1SessionLifeCycleAddDocumentSessionGuidPutAsyncWithHttpInfo(sessionGuid, body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (Guid?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Guid?>> ApiV1SessionLifeCycleAddDocumentSessionGuidPutAsyncWithHttpInfo (Guid? sessionGuid, CreateDocumentDto body = null)
        {
            // verify the required parameter 'sessionGuid' is set
            if (sessionGuid == null)
                throw new ApiException(400, "Missing required parameter 'sessionGuid' when calling SessionLifeCycleApi->ApiV1SessionLifeCycleAddDocumentSessionGuidPut");

            var localVarPath = "/api/v1/SessionLifeCycle/AddDocument/{sessionGuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; x-api-version=1.0", 
                "text/json; x-api-version=1.0", 
                "application/_*+json; x-api-version=1.0"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain; x-api-version=1.0",
                "application/json; x-api-version=1.0",
                "text/json; x-api-version=1.0"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sessionGuid != null) localVarPathParams.Add("sessionGuid", this.Configuration.ApiClient.ParameterToString(sessionGuid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Bearer) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1SessionLifeCycleAddDocumentSessionGuidPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Guid?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Guid?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Guid?)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="signerGuid"></param>
        /// <param name="fieldGroupGuid"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Guid?</returns>
        public Guid? ApiV1SessionLifeCycleAddDocumentToFieldGroupSessionGuidSignerGuidFieldGroupGuidPut (Guid? sessionGuid, Guid? signerGuid, Guid? fieldGroupGuid, CreateFieldGroupDocumentDto body = null)
        {
             ApiResponse<Guid?> localVarResponse = ApiV1SessionLifeCycleAddDocumentToFieldGroupSessionGuidSignerGuidFieldGroupGuidPutWithHttpInfo(sessionGuid, signerGuid, fieldGroupGuid, body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="signerGuid"></param>
        /// <param name="fieldGroupGuid"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Guid?</returns>
        public ApiResponse< Guid? > ApiV1SessionLifeCycleAddDocumentToFieldGroupSessionGuidSignerGuidFieldGroupGuidPutWithHttpInfo (Guid? sessionGuid, Guid? signerGuid, Guid? fieldGroupGuid, CreateFieldGroupDocumentDto body = null)
        {
            // verify the required parameter 'sessionGuid' is set
            if (sessionGuid == null)
                throw new ApiException(400, "Missing required parameter 'sessionGuid' when calling SessionLifeCycleApi->ApiV1SessionLifeCycleAddDocumentToFieldGroupSessionGuidSignerGuidFieldGroupGuidPut");
            // verify the required parameter 'signerGuid' is set
            if (signerGuid == null)
                throw new ApiException(400, "Missing required parameter 'signerGuid' when calling SessionLifeCycleApi->ApiV1SessionLifeCycleAddDocumentToFieldGroupSessionGuidSignerGuidFieldGroupGuidPut");
            // verify the required parameter 'fieldGroupGuid' is set
            if (fieldGroupGuid == null)
                throw new ApiException(400, "Missing required parameter 'fieldGroupGuid' when calling SessionLifeCycleApi->ApiV1SessionLifeCycleAddDocumentToFieldGroupSessionGuidSignerGuidFieldGroupGuidPut");

            var localVarPath = "/api/v1/SessionLifeCycle/AddDocumentToFieldGroup/{sessionGuid}/{signerGuid}/{fieldGroupGuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; x-api-version=1.0", 
                "text/json; x-api-version=1.0", 
                "application/_*+json; x-api-version=1.0"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain; x-api-version=1.0",
                "application/json; x-api-version=1.0",
                "text/json; x-api-version=1.0"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sessionGuid != null) localVarPathParams.Add("sessionGuid", this.Configuration.ApiClient.ParameterToString(sessionGuid)); // path parameter
            if (signerGuid != null) localVarPathParams.Add("signerGuid", this.Configuration.ApiClient.ParameterToString(signerGuid)); // path parameter
            if (fieldGroupGuid != null) localVarPathParams.Add("fieldGroupGuid", this.Configuration.ApiClient.ParameterToString(fieldGroupGuid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Bearer) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1SessionLifeCycleAddDocumentToFieldGroupSessionGuidSignerGuidFieldGroupGuidPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Guid?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Guid?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Guid?)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="signerGuid"></param>
        /// <param name="fieldGroupGuid"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of Guid?</returns>
        public async System.Threading.Tasks.Task<Guid?> ApiV1SessionLifeCycleAddDocumentToFieldGroupSessionGuidSignerGuidFieldGroupGuidPutAsync (Guid? sessionGuid, Guid? signerGuid, Guid? fieldGroupGuid, CreateFieldGroupDocumentDto body = null)
        {
             ApiResponse<Guid?> localVarResponse = await ApiV1SessionLifeCycleAddDocumentToFieldGroupSessionGuidSignerGuidFieldGroupGuidPutAsyncWithHttpInfo(sessionGuid, signerGuid, fieldGroupGuid, body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="signerGuid"></param>
        /// <param name="fieldGroupGuid"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (Guid?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Guid?>> ApiV1SessionLifeCycleAddDocumentToFieldGroupSessionGuidSignerGuidFieldGroupGuidPutAsyncWithHttpInfo (Guid? sessionGuid, Guid? signerGuid, Guid? fieldGroupGuid, CreateFieldGroupDocumentDto body = null)
        {
            // verify the required parameter 'sessionGuid' is set
            if (sessionGuid == null)
                throw new ApiException(400, "Missing required parameter 'sessionGuid' when calling SessionLifeCycleApi->ApiV1SessionLifeCycleAddDocumentToFieldGroupSessionGuidSignerGuidFieldGroupGuidPut");
            // verify the required parameter 'signerGuid' is set
            if (signerGuid == null)
                throw new ApiException(400, "Missing required parameter 'signerGuid' when calling SessionLifeCycleApi->ApiV1SessionLifeCycleAddDocumentToFieldGroupSessionGuidSignerGuidFieldGroupGuidPut");
            // verify the required parameter 'fieldGroupGuid' is set
            if (fieldGroupGuid == null)
                throw new ApiException(400, "Missing required parameter 'fieldGroupGuid' when calling SessionLifeCycleApi->ApiV1SessionLifeCycleAddDocumentToFieldGroupSessionGuidSignerGuidFieldGroupGuidPut");

            var localVarPath = "/api/v1/SessionLifeCycle/AddDocumentToFieldGroup/{sessionGuid}/{signerGuid}/{fieldGroupGuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; x-api-version=1.0", 
                "text/json; x-api-version=1.0", 
                "application/_*+json; x-api-version=1.0"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain; x-api-version=1.0",
                "application/json; x-api-version=1.0",
                "text/json; x-api-version=1.0"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sessionGuid != null) localVarPathParams.Add("sessionGuid", this.Configuration.ApiClient.ParameterToString(sessionGuid)); // path parameter
            if (signerGuid != null) localVarPathParams.Add("signerGuid", this.Configuration.ApiClient.ParameterToString(signerGuid)); // path parameter
            if (fieldGroupGuid != null) localVarPathParams.Add("fieldGroupGuid", this.Configuration.ApiClient.ParameterToString(fieldGroupGuid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Bearer) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1SessionLifeCycleAddDocumentToFieldGroupSessionGuidSignerGuidFieldGroupGuidPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Guid?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Guid?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Guid?)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="signerGuid"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Guid?</returns>
        public Guid? ApiV1SessionLifeCycleAddFieldGroupSessionGuidSignerGuidPut (Guid? sessionGuid, Guid? signerGuid, CreateFieldGroupDto body = null)
        {
             ApiResponse<Guid?> localVarResponse = ApiV1SessionLifeCycleAddFieldGroupSessionGuidSignerGuidPutWithHttpInfo(sessionGuid, signerGuid, body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="signerGuid"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Guid?</returns>
        public ApiResponse< Guid? > ApiV1SessionLifeCycleAddFieldGroupSessionGuidSignerGuidPutWithHttpInfo (Guid? sessionGuid, Guid? signerGuid, CreateFieldGroupDto body = null)
        {
            // verify the required parameter 'sessionGuid' is set
            if (sessionGuid == null)
                throw new ApiException(400, "Missing required parameter 'sessionGuid' when calling SessionLifeCycleApi->ApiV1SessionLifeCycleAddFieldGroupSessionGuidSignerGuidPut");
            // verify the required parameter 'signerGuid' is set
            if (signerGuid == null)
                throw new ApiException(400, "Missing required parameter 'signerGuid' when calling SessionLifeCycleApi->ApiV1SessionLifeCycleAddFieldGroupSessionGuidSignerGuidPut");

            var localVarPath = "/api/v1/SessionLifeCycle/AddFieldGroup/{sessionGuid}/{signerGuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; x-api-version=1.0", 
                "text/json; x-api-version=1.0", 
                "application/_*+json; x-api-version=1.0"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain; x-api-version=1.0",
                "application/json; x-api-version=1.0",
                "text/json; x-api-version=1.0"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sessionGuid != null) localVarPathParams.Add("sessionGuid", this.Configuration.ApiClient.ParameterToString(sessionGuid)); // path parameter
            if (signerGuid != null) localVarPathParams.Add("signerGuid", this.Configuration.ApiClient.ParameterToString(signerGuid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Bearer) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1SessionLifeCycleAddFieldGroupSessionGuidSignerGuidPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Guid?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Guid?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Guid?)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="signerGuid"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of Guid?</returns>
        public async System.Threading.Tasks.Task<Guid?> ApiV1SessionLifeCycleAddFieldGroupSessionGuidSignerGuidPutAsync (Guid? sessionGuid, Guid? signerGuid, CreateFieldGroupDto body = null)
        {
             ApiResponse<Guid?> localVarResponse = await ApiV1SessionLifeCycleAddFieldGroupSessionGuidSignerGuidPutAsyncWithHttpInfo(sessionGuid, signerGuid, body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="signerGuid"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (Guid?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Guid?>> ApiV1SessionLifeCycleAddFieldGroupSessionGuidSignerGuidPutAsyncWithHttpInfo (Guid? sessionGuid, Guid? signerGuid, CreateFieldGroupDto body = null)
        {
            // verify the required parameter 'sessionGuid' is set
            if (sessionGuid == null)
                throw new ApiException(400, "Missing required parameter 'sessionGuid' when calling SessionLifeCycleApi->ApiV1SessionLifeCycleAddFieldGroupSessionGuidSignerGuidPut");
            // verify the required parameter 'signerGuid' is set
            if (signerGuid == null)
                throw new ApiException(400, "Missing required parameter 'signerGuid' when calling SessionLifeCycleApi->ApiV1SessionLifeCycleAddFieldGroupSessionGuidSignerGuidPut");

            var localVarPath = "/api/v1/SessionLifeCycle/AddFieldGroup/{sessionGuid}/{signerGuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; x-api-version=1.0", 
                "text/json; x-api-version=1.0", 
                "application/_*+json; x-api-version=1.0"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain; x-api-version=1.0",
                "application/json; x-api-version=1.0",
                "text/json; x-api-version=1.0"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sessionGuid != null) localVarPathParams.Add("sessionGuid", this.Configuration.ApiClient.ParameterToString(sessionGuid)); // path parameter
            if (signerGuid != null) localVarPathParams.Add("signerGuid", this.Configuration.ApiClient.ParameterToString(signerGuid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Bearer) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1SessionLifeCycleAddFieldGroupSessionGuidSignerGuidPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Guid?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Guid?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Guid?)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="signerGuid"></param>
        /// <param name="fieldGroupGuid"></param>
        /// <param name="documentGuid"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Guid?</returns>
        public Guid? ApiV1SessionLifeCycleAddFieldSessionGuidSignerGuidFieldGroupGuidDocumentGuidPut (Guid? sessionGuid, Guid? signerGuid, Guid? fieldGroupGuid, Guid? documentGuid, CreateFieldDto body = null)
        {
             ApiResponse<Guid?> localVarResponse = ApiV1SessionLifeCycleAddFieldSessionGuidSignerGuidFieldGroupGuidDocumentGuidPutWithHttpInfo(sessionGuid, signerGuid, fieldGroupGuid, documentGuid, body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="signerGuid"></param>
        /// <param name="fieldGroupGuid"></param>
        /// <param name="documentGuid"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Guid?</returns>
        public ApiResponse< Guid? > ApiV1SessionLifeCycleAddFieldSessionGuidSignerGuidFieldGroupGuidDocumentGuidPutWithHttpInfo (Guid? sessionGuid, Guid? signerGuid, Guid? fieldGroupGuid, Guid? documentGuid, CreateFieldDto body = null)
        {
            // verify the required parameter 'sessionGuid' is set
            if (sessionGuid == null)
                throw new ApiException(400, "Missing required parameter 'sessionGuid' when calling SessionLifeCycleApi->ApiV1SessionLifeCycleAddFieldSessionGuidSignerGuidFieldGroupGuidDocumentGuidPut");
            // verify the required parameter 'signerGuid' is set
            if (signerGuid == null)
                throw new ApiException(400, "Missing required parameter 'signerGuid' when calling SessionLifeCycleApi->ApiV1SessionLifeCycleAddFieldSessionGuidSignerGuidFieldGroupGuidDocumentGuidPut");
            // verify the required parameter 'fieldGroupGuid' is set
            if (fieldGroupGuid == null)
                throw new ApiException(400, "Missing required parameter 'fieldGroupGuid' when calling SessionLifeCycleApi->ApiV1SessionLifeCycleAddFieldSessionGuidSignerGuidFieldGroupGuidDocumentGuidPut");
            // verify the required parameter 'documentGuid' is set
            if (documentGuid == null)
                throw new ApiException(400, "Missing required parameter 'documentGuid' when calling SessionLifeCycleApi->ApiV1SessionLifeCycleAddFieldSessionGuidSignerGuidFieldGroupGuidDocumentGuidPut");

            var localVarPath = "/api/v1/SessionLifeCycle/AddField/{sessionGuid}/{signerGuid}/{fieldGroupGuid}/{documentGuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; x-api-version=1.0", 
                "text/json; x-api-version=1.0", 
                "application/_*+json; x-api-version=1.0"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain; x-api-version=1.0",
                "application/json; x-api-version=1.0",
                "text/json; x-api-version=1.0"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sessionGuid != null) localVarPathParams.Add("sessionGuid", this.Configuration.ApiClient.ParameterToString(sessionGuid)); // path parameter
            if (signerGuid != null) localVarPathParams.Add("signerGuid", this.Configuration.ApiClient.ParameterToString(signerGuid)); // path parameter
            if (fieldGroupGuid != null) localVarPathParams.Add("fieldGroupGuid", this.Configuration.ApiClient.ParameterToString(fieldGroupGuid)); // path parameter
            if (documentGuid != null) localVarPathParams.Add("documentGuid", this.Configuration.ApiClient.ParameterToString(documentGuid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Bearer) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1SessionLifeCycleAddFieldSessionGuidSignerGuidFieldGroupGuidDocumentGuidPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Guid?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Guid?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Guid?)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="signerGuid"></param>
        /// <param name="fieldGroupGuid"></param>
        /// <param name="documentGuid"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of Guid?</returns>
        public async System.Threading.Tasks.Task<Guid?> ApiV1SessionLifeCycleAddFieldSessionGuidSignerGuidFieldGroupGuidDocumentGuidPutAsync (Guid? sessionGuid, Guid? signerGuid, Guid? fieldGroupGuid, Guid? documentGuid, CreateFieldDto body = null)
        {
             ApiResponse<Guid?> localVarResponse = await ApiV1SessionLifeCycleAddFieldSessionGuidSignerGuidFieldGroupGuidDocumentGuidPutAsyncWithHttpInfo(sessionGuid, signerGuid, fieldGroupGuid, documentGuid, body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="signerGuid"></param>
        /// <param name="fieldGroupGuid"></param>
        /// <param name="documentGuid"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (Guid?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Guid?>> ApiV1SessionLifeCycleAddFieldSessionGuidSignerGuidFieldGroupGuidDocumentGuidPutAsyncWithHttpInfo (Guid? sessionGuid, Guid? signerGuid, Guid? fieldGroupGuid, Guid? documentGuid, CreateFieldDto body = null)
        {
            // verify the required parameter 'sessionGuid' is set
            if (sessionGuid == null)
                throw new ApiException(400, "Missing required parameter 'sessionGuid' when calling SessionLifeCycleApi->ApiV1SessionLifeCycleAddFieldSessionGuidSignerGuidFieldGroupGuidDocumentGuidPut");
            // verify the required parameter 'signerGuid' is set
            if (signerGuid == null)
                throw new ApiException(400, "Missing required parameter 'signerGuid' when calling SessionLifeCycleApi->ApiV1SessionLifeCycleAddFieldSessionGuidSignerGuidFieldGroupGuidDocumentGuidPut");
            // verify the required parameter 'fieldGroupGuid' is set
            if (fieldGroupGuid == null)
                throw new ApiException(400, "Missing required parameter 'fieldGroupGuid' when calling SessionLifeCycleApi->ApiV1SessionLifeCycleAddFieldSessionGuidSignerGuidFieldGroupGuidDocumentGuidPut");
            // verify the required parameter 'documentGuid' is set
            if (documentGuid == null)
                throw new ApiException(400, "Missing required parameter 'documentGuid' when calling SessionLifeCycleApi->ApiV1SessionLifeCycleAddFieldSessionGuidSignerGuidFieldGroupGuidDocumentGuidPut");

            var localVarPath = "/api/v1/SessionLifeCycle/AddField/{sessionGuid}/{signerGuid}/{fieldGroupGuid}/{documentGuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; x-api-version=1.0", 
                "text/json; x-api-version=1.0", 
                "application/_*+json; x-api-version=1.0"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain; x-api-version=1.0",
                "application/json; x-api-version=1.0",
                "text/json; x-api-version=1.0"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sessionGuid != null) localVarPathParams.Add("sessionGuid", this.Configuration.ApiClient.ParameterToString(sessionGuid)); // path parameter
            if (signerGuid != null) localVarPathParams.Add("signerGuid", this.Configuration.ApiClient.ParameterToString(signerGuid)); // path parameter
            if (fieldGroupGuid != null) localVarPathParams.Add("fieldGroupGuid", this.Configuration.ApiClient.ParameterToString(fieldGroupGuid)); // path parameter
            if (documentGuid != null) localVarPathParams.Add("documentGuid", this.Configuration.ApiClient.ParameterToString(documentGuid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Bearer) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1SessionLifeCycleAddFieldSessionGuidSignerGuidFieldGroupGuidDocumentGuidPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Guid?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Guid?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Guid?)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Guid?</returns>
        public Guid? ApiV1SessionLifeCycleAddFollowerSessionGuidPut (Guid? sessionGuid, CreateFollowerDto body = null)
        {
             ApiResponse<Guid?> localVarResponse = ApiV1SessionLifeCycleAddFollowerSessionGuidPutWithHttpInfo(sessionGuid, body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Guid?</returns>
        public ApiResponse< Guid? > ApiV1SessionLifeCycleAddFollowerSessionGuidPutWithHttpInfo (Guid? sessionGuid, CreateFollowerDto body = null)
        {
            // verify the required parameter 'sessionGuid' is set
            if (sessionGuid == null)
                throw new ApiException(400, "Missing required parameter 'sessionGuid' when calling SessionLifeCycleApi->ApiV1SessionLifeCycleAddFollowerSessionGuidPut");

            var localVarPath = "/api/v1/SessionLifeCycle/AddFollower/{sessionGuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; x-api-version=1.0", 
                "text/json; x-api-version=1.0", 
                "application/_*+json; x-api-version=1.0"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain; x-api-version=1.0",
                "application/json; x-api-version=1.0",
                "text/json; x-api-version=1.0"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sessionGuid != null) localVarPathParams.Add("sessionGuid", this.Configuration.ApiClient.ParameterToString(sessionGuid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Bearer) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1SessionLifeCycleAddFollowerSessionGuidPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Guid?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Guid?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Guid?)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of Guid?</returns>
        public async System.Threading.Tasks.Task<Guid?> ApiV1SessionLifeCycleAddFollowerSessionGuidPutAsync (Guid? sessionGuid, CreateFollowerDto body = null)
        {
             ApiResponse<Guid?> localVarResponse = await ApiV1SessionLifeCycleAddFollowerSessionGuidPutAsyncWithHttpInfo(sessionGuid, body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (Guid?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Guid?>> ApiV1SessionLifeCycleAddFollowerSessionGuidPutAsyncWithHttpInfo (Guid? sessionGuid, CreateFollowerDto body = null)
        {
            // verify the required parameter 'sessionGuid' is set
            if (sessionGuid == null)
                throw new ApiException(400, "Missing required parameter 'sessionGuid' when calling SessionLifeCycleApi->ApiV1SessionLifeCycleAddFollowerSessionGuidPut");

            var localVarPath = "/api/v1/SessionLifeCycle/AddFollower/{sessionGuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; x-api-version=1.0", 
                "text/json; x-api-version=1.0", 
                "application/_*+json; x-api-version=1.0"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain; x-api-version=1.0",
                "application/json; x-api-version=1.0",
                "text/json; x-api-version=1.0"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sessionGuid != null) localVarPathParams.Add("sessionGuid", this.Configuration.ApiClient.ParameterToString(sessionGuid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Bearer) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1SessionLifeCycleAddFollowerSessionGuidPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Guid?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Guid?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Guid?)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Guid?</returns>
        public Guid? ApiV1SessionLifeCycleAddSignerSessionGuidPut (Guid? sessionGuid, CreateSignerDto body = null)
        {
             ApiResponse<Guid?> localVarResponse = ApiV1SessionLifeCycleAddSignerSessionGuidPutWithHttpInfo(sessionGuid, body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Guid?</returns>
        public ApiResponse< Guid? > ApiV1SessionLifeCycleAddSignerSessionGuidPutWithHttpInfo (Guid? sessionGuid, CreateSignerDto body = null)
        {
            // verify the required parameter 'sessionGuid' is set
            if (sessionGuid == null)
                throw new ApiException(400, "Missing required parameter 'sessionGuid' when calling SessionLifeCycleApi->ApiV1SessionLifeCycleAddSignerSessionGuidPut");

            var localVarPath = "/api/v1/SessionLifeCycle/AddSigner/{sessionGuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; x-api-version=1.0", 
                "text/json; x-api-version=1.0", 
                "application/_*+json; x-api-version=1.0"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain; x-api-version=1.0",
                "application/json; x-api-version=1.0",
                "text/json; x-api-version=1.0"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sessionGuid != null) localVarPathParams.Add("sessionGuid", this.Configuration.ApiClient.ParameterToString(sessionGuid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Bearer) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1SessionLifeCycleAddSignerSessionGuidPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Guid?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Guid?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Guid?)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of Guid?</returns>
        public async System.Threading.Tasks.Task<Guid?> ApiV1SessionLifeCycleAddSignerSessionGuidPutAsync (Guid? sessionGuid, CreateSignerDto body = null)
        {
             ApiResponse<Guid?> localVarResponse = await ApiV1SessionLifeCycleAddSignerSessionGuidPutAsyncWithHttpInfo(sessionGuid, body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (Guid?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Guid?>> ApiV1SessionLifeCycleAddSignerSessionGuidPutAsyncWithHttpInfo (Guid? sessionGuid, CreateSignerDto body = null)
        {
            // verify the required parameter 'sessionGuid' is set
            if (sessionGuid == null)
                throw new ApiException(400, "Missing required parameter 'sessionGuid' when calling SessionLifeCycleApi->ApiV1SessionLifeCycleAddSignerSessionGuidPut");

            var localVarPath = "/api/v1/SessionLifeCycle/AddSigner/{sessionGuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; x-api-version=1.0", 
                "text/json; x-api-version=1.0", 
                "application/_*+json; x-api-version=1.0"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain; x-api-version=1.0",
                "application/json; x-api-version=1.0",
                "text/json; x-api-version=1.0"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sessionGuid != null) localVarPathParams.Add("sessionGuid", this.Configuration.ApiClient.ParameterToString(sessionGuid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Bearer) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1SessionLifeCycleAddSignerSessionGuidPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Guid?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Guid?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Guid?)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>CreateSessionResponse</returns>
        public CreateSessionResponse ApiV1SessionLifeCycleCreatePost (CreateSessionRequest body = null)
        {
             ApiResponse<CreateSessionResponse> localVarResponse = ApiV1SessionLifeCycleCreatePostWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of CreateSessionResponse</returns>
        public ApiResponse< CreateSessionResponse > ApiV1SessionLifeCycleCreatePostWithHttpInfo (CreateSessionRequest body = null)
        {

            var localVarPath = "/api/v1/SessionLifeCycle/Create";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; x-api-version=1.0", 
                "text/json; x-api-version=1.0", 
                "application/_*+json; x-api-version=1.0"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain; x-api-version=1.0",
                "application/json; x-api-version=1.0",
                "text/json; x-api-version=1.0"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Bearer) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1SessionLifeCycleCreatePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateSessionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CreateSessionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateSessionResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of CreateSessionResponse</returns>
        public async System.Threading.Tasks.Task<CreateSessionResponse> ApiV1SessionLifeCycleCreatePostAsync (CreateSessionRequest body = null)
        {
             ApiResponse<CreateSessionResponse> localVarResponse = await ApiV1SessionLifeCycleCreatePostAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (CreateSessionResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CreateSessionResponse>> ApiV1SessionLifeCycleCreatePostAsyncWithHttpInfo (CreateSessionRequest body = null)
        {

            var localVarPath = "/api/v1/SessionLifeCycle/Create";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; x-api-version=1.0", 
                "text/json; x-api-version=1.0", 
                "application/_*+json; x-api-version=1.0"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain; x-api-version=1.0",
                "application/json; x-api-version=1.0",
                "text/json; x-api-version=1.0"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Bearer) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1SessionLifeCycleCreatePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateSessionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CreateSessionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateSessionResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <returns></returns>
        public void ApiV1SessionLifeCycleDeleteSessionGuidDelete (Guid? sessionGuid)
        {
             ApiV1SessionLifeCycleDeleteSessionGuidDeleteWithHttpInfo(sessionGuid);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ApiV1SessionLifeCycleDeleteSessionGuidDeleteWithHttpInfo (Guid? sessionGuid)
        {
            // verify the required parameter 'sessionGuid' is set
            if (sessionGuid == null)
                throw new ApiException(400, "Missing required parameter 'sessionGuid' when calling SessionLifeCycleApi->ApiV1SessionLifeCycleDeleteSessionGuidDelete");

            var localVarPath = "/api/v1/SessionLifeCycle/Delete/{sessionGuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sessionGuid != null) localVarPathParams.Add("sessionGuid", this.Configuration.ApiClient.ParameterToString(sessionGuid)); // path parameter
            // authentication (Bearer) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1SessionLifeCycleDeleteSessionGuidDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiV1SessionLifeCycleDeleteSessionGuidDeleteAsync (Guid? sessionGuid)
        {
             await ApiV1SessionLifeCycleDeleteSessionGuidDeleteAsyncWithHttpInfo(sessionGuid);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ApiV1SessionLifeCycleDeleteSessionGuidDeleteAsyncWithHttpInfo (Guid? sessionGuid)
        {
            // verify the required parameter 'sessionGuid' is set
            if (sessionGuid == null)
                throw new ApiException(400, "Missing required parameter 'sessionGuid' when calling SessionLifeCycleApi->ApiV1SessionLifeCycleDeleteSessionGuidDelete");

            var localVarPath = "/api/v1/SessionLifeCycle/Delete/{sessionGuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sessionGuid != null) localVarPathParams.Add("sessionGuid", this.Configuration.ApiClient.ParameterToString(sessionGuid)); // path parameter
            // authentication (Bearer) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1SessionLifeCycleDeleteSessionGuidDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>GetAllSessionResponseGetPaginatedListResponseExecuted</returns>
        public GetAllSessionResponseGetPaginatedListResponseExecuted ApiV1SessionLifeCycleGetAllPost (GetAllSessionRequest body = null)
        {
             ApiResponse<GetAllSessionResponseGetPaginatedListResponseExecuted> localVarResponse = ApiV1SessionLifeCycleGetAllPostWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of GetAllSessionResponseGetPaginatedListResponseExecuted</returns>
        public ApiResponse< GetAllSessionResponseGetPaginatedListResponseExecuted > ApiV1SessionLifeCycleGetAllPostWithHttpInfo (GetAllSessionRequest body = null)
        {

            var localVarPath = "/api/v1/SessionLifeCycle/GetAll";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; x-api-version=1.0", 
                "text/json; x-api-version=1.0", 
                "application/_*+json; x-api-version=1.0"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain; x-api-version=1.0",
                "application/json; x-api-version=1.0",
                "text/json; x-api-version=1.0"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Bearer) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1SessionLifeCycleGetAllPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetAllSessionResponseGetPaginatedListResponseExecuted>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetAllSessionResponseGetPaginatedListResponseExecuted) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetAllSessionResponseGetPaginatedListResponseExecuted)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of GetAllSessionResponseGetPaginatedListResponseExecuted</returns>
        public async System.Threading.Tasks.Task<GetAllSessionResponseGetPaginatedListResponseExecuted> ApiV1SessionLifeCycleGetAllPostAsync (GetAllSessionRequest body = null)
        {
             ApiResponse<GetAllSessionResponseGetPaginatedListResponseExecuted> localVarResponse = await ApiV1SessionLifeCycleGetAllPostAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (GetAllSessionResponseGetPaginatedListResponseExecuted)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetAllSessionResponseGetPaginatedListResponseExecuted>> ApiV1SessionLifeCycleGetAllPostAsyncWithHttpInfo (GetAllSessionRequest body = null)
        {

            var localVarPath = "/api/v1/SessionLifeCycle/GetAll";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; x-api-version=1.0", 
                "text/json; x-api-version=1.0", 
                "application/_*+json; x-api-version=1.0"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain; x-api-version=1.0",
                "application/json; x-api-version=1.0",
                "text/json; x-api-version=1.0"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Bearer) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1SessionLifeCycleGetAllPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetAllSessionResponseGetPaginatedListResponseExecuted>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetAllSessionResponseGetPaginatedListResponseExecuted) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetAllSessionResponseGetPaginatedListResponseExecuted)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="signerGuid"></param>
        /// <param name="attachmentGuid"></param>
        /// <returns>FileDataBase64</returns>
        public FileDataBase64 ApiV1SessionLifeCycleGetAttachmentBase64SessionGuidSignerGuidAttachmentGuidGet (Guid? sessionGuid, Guid? signerGuid, Guid? attachmentGuid)
        {
             ApiResponse<FileDataBase64> localVarResponse = ApiV1SessionLifeCycleGetAttachmentBase64SessionGuidSignerGuidAttachmentGuidGetWithHttpInfo(sessionGuid, signerGuid, attachmentGuid);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="signerGuid"></param>
        /// <param name="attachmentGuid"></param>
        /// <returns>ApiResponse of FileDataBase64</returns>
        public ApiResponse< FileDataBase64 > ApiV1SessionLifeCycleGetAttachmentBase64SessionGuidSignerGuidAttachmentGuidGetWithHttpInfo (Guid? sessionGuid, Guid? signerGuid, Guid? attachmentGuid)
        {
            // verify the required parameter 'sessionGuid' is set
            if (sessionGuid == null)
                throw new ApiException(400, "Missing required parameter 'sessionGuid' when calling SessionLifeCycleApi->ApiV1SessionLifeCycleGetAttachmentBase64SessionGuidSignerGuidAttachmentGuidGet");
            // verify the required parameter 'signerGuid' is set
            if (signerGuid == null)
                throw new ApiException(400, "Missing required parameter 'signerGuid' when calling SessionLifeCycleApi->ApiV1SessionLifeCycleGetAttachmentBase64SessionGuidSignerGuidAttachmentGuidGet");
            // verify the required parameter 'attachmentGuid' is set
            if (attachmentGuid == null)
                throw new ApiException(400, "Missing required parameter 'attachmentGuid' when calling SessionLifeCycleApi->ApiV1SessionLifeCycleGetAttachmentBase64SessionGuidSignerGuidAttachmentGuidGet");

            var localVarPath = "/api/v1/SessionLifeCycle/GetAttachmentBase64/{sessionGuid}/{signerGuid}/{attachmentGuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain; x-api-version=1.0",
                "application/json; x-api-version=1.0",
                "text/json; x-api-version=1.0"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sessionGuid != null) localVarPathParams.Add("sessionGuid", this.Configuration.ApiClient.ParameterToString(sessionGuid)); // path parameter
            if (signerGuid != null) localVarPathParams.Add("signerGuid", this.Configuration.ApiClient.ParameterToString(signerGuid)); // path parameter
            if (attachmentGuid != null) localVarPathParams.Add("attachmentGuid", this.Configuration.ApiClient.ParameterToString(attachmentGuid)); // path parameter
            // authentication (Bearer) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1SessionLifeCycleGetAttachmentBase64SessionGuidSignerGuidAttachmentGuidGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FileDataBase64>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (FileDataBase64) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FileDataBase64)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="signerGuid"></param>
        /// <param name="attachmentGuid"></param>
        /// <returns>Task of FileDataBase64</returns>
        public async System.Threading.Tasks.Task<FileDataBase64> ApiV1SessionLifeCycleGetAttachmentBase64SessionGuidSignerGuidAttachmentGuidGetAsync (Guid? sessionGuid, Guid? signerGuid, Guid? attachmentGuid)
        {
             ApiResponse<FileDataBase64> localVarResponse = await ApiV1SessionLifeCycleGetAttachmentBase64SessionGuidSignerGuidAttachmentGuidGetAsyncWithHttpInfo(sessionGuid, signerGuid, attachmentGuid);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="signerGuid"></param>
        /// <param name="attachmentGuid"></param>
        /// <returns>Task of ApiResponse (FileDataBase64)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FileDataBase64>> ApiV1SessionLifeCycleGetAttachmentBase64SessionGuidSignerGuidAttachmentGuidGetAsyncWithHttpInfo (Guid? sessionGuid, Guid? signerGuid, Guid? attachmentGuid)
        {
            // verify the required parameter 'sessionGuid' is set
            if (sessionGuid == null)
                throw new ApiException(400, "Missing required parameter 'sessionGuid' when calling SessionLifeCycleApi->ApiV1SessionLifeCycleGetAttachmentBase64SessionGuidSignerGuidAttachmentGuidGet");
            // verify the required parameter 'signerGuid' is set
            if (signerGuid == null)
                throw new ApiException(400, "Missing required parameter 'signerGuid' when calling SessionLifeCycleApi->ApiV1SessionLifeCycleGetAttachmentBase64SessionGuidSignerGuidAttachmentGuidGet");
            // verify the required parameter 'attachmentGuid' is set
            if (attachmentGuid == null)
                throw new ApiException(400, "Missing required parameter 'attachmentGuid' when calling SessionLifeCycleApi->ApiV1SessionLifeCycleGetAttachmentBase64SessionGuidSignerGuidAttachmentGuidGet");

            var localVarPath = "/api/v1/SessionLifeCycle/GetAttachmentBase64/{sessionGuid}/{signerGuid}/{attachmentGuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain; x-api-version=1.0",
                "application/json; x-api-version=1.0",
                "text/json; x-api-version=1.0"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sessionGuid != null) localVarPathParams.Add("sessionGuid", this.Configuration.ApiClient.ParameterToString(sessionGuid)); // path parameter
            if (signerGuid != null) localVarPathParams.Add("signerGuid", this.Configuration.ApiClient.ParameterToString(signerGuid)); // path parameter
            if (attachmentGuid != null) localVarPathParams.Add("attachmentGuid", this.Configuration.ApiClient.ParameterToString(attachmentGuid)); // path parameter
            // authentication (Bearer) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1SessionLifeCycleGetAttachmentBase64SessionGuidSignerGuidAttachmentGuidGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FileDataBase64>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (FileDataBase64) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FileDataBase64)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="signerGuid"></param>
        /// <param name="attachmentGuid"></param>
        /// <returns>byte[]</returns>
        public byte[] ApiV1SessionLifeCycleGetAttachmentSessionGuidSignerGuidAttachmentGuidGet (Guid? sessionGuid, Guid? signerGuid, Guid? attachmentGuid)
        {
             ApiResponse<byte[]> localVarResponse = ApiV1SessionLifeCycleGetAttachmentSessionGuidSignerGuidAttachmentGuidGetWithHttpInfo(sessionGuid, signerGuid, attachmentGuid);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="signerGuid"></param>
        /// <param name="attachmentGuid"></param>
        /// <returns>ApiResponse of byte[]</returns>
        public ApiResponse< byte[] > ApiV1SessionLifeCycleGetAttachmentSessionGuidSignerGuidAttachmentGuidGetWithHttpInfo (Guid? sessionGuid, Guid? signerGuid, Guid? attachmentGuid)
        {
            // verify the required parameter 'sessionGuid' is set
            if (sessionGuid == null)
                throw new ApiException(400, "Missing required parameter 'sessionGuid' when calling SessionLifeCycleApi->ApiV1SessionLifeCycleGetAttachmentSessionGuidSignerGuidAttachmentGuidGet");
            // verify the required parameter 'signerGuid' is set
            if (signerGuid == null)
                throw new ApiException(400, "Missing required parameter 'signerGuid' when calling SessionLifeCycleApi->ApiV1SessionLifeCycleGetAttachmentSessionGuidSignerGuidAttachmentGuidGet");
            // verify the required parameter 'attachmentGuid' is set
            if (attachmentGuid == null)
                throw new ApiException(400, "Missing required parameter 'attachmentGuid' when calling SessionLifeCycleApi->ApiV1SessionLifeCycleGetAttachmentSessionGuidSignerGuidAttachmentGuidGet");

            var localVarPath = "/api/v1/SessionLifeCycle/GetAttachment/{sessionGuid}/{signerGuid}/{attachmentGuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain; x-api-version=1.0",
                "application/json; x-api-version=1.0",
                "text/json; x-api-version=1.0"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sessionGuid != null) localVarPathParams.Add("sessionGuid", this.Configuration.ApiClient.ParameterToString(sessionGuid)); // path parameter
            if (signerGuid != null) localVarPathParams.Add("signerGuid", this.Configuration.ApiClient.ParameterToString(signerGuid)); // path parameter
            if (attachmentGuid != null) localVarPathParams.Add("attachmentGuid", this.Configuration.ApiClient.ParameterToString(attachmentGuid)); // path parameter
            // authentication (Bearer) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1SessionLifeCycleGetAttachmentSessionGuidSignerGuidAttachmentGuidGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="signerGuid"></param>
        /// <param name="attachmentGuid"></param>
        /// <returns>Task of byte[]</returns>
        public async System.Threading.Tasks.Task<byte[]> ApiV1SessionLifeCycleGetAttachmentSessionGuidSignerGuidAttachmentGuidGetAsync (Guid? sessionGuid, Guid? signerGuid, Guid? attachmentGuid)
        {
             ApiResponse<byte[]> localVarResponse = await ApiV1SessionLifeCycleGetAttachmentSessionGuidSignerGuidAttachmentGuidGetAsyncWithHttpInfo(sessionGuid, signerGuid, attachmentGuid);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="signerGuid"></param>
        /// <param name="attachmentGuid"></param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        public async System.Threading.Tasks.Task<ApiResponse<byte[]>> ApiV1SessionLifeCycleGetAttachmentSessionGuidSignerGuidAttachmentGuidGetAsyncWithHttpInfo (Guid? sessionGuid, Guid? signerGuid, Guid? attachmentGuid)
        {
            // verify the required parameter 'sessionGuid' is set
            if (sessionGuid == null)
                throw new ApiException(400, "Missing required parameter 'sessionGuid' when calling SessionLifeCycleApi->ApiV1SessionLifeCycleGetAttachmentSessionGuidSignerGuidAttachmentGuidGet");
            // verify the required parameter 'signerGuid' is set
            if (signerGuid == null)
                throw new ApiException(400, "Missing required parameter 'signerGuid' when calling SessionLifeCycleApi->ApiV1SessionLifeCycleGetAttachmentSessionGuidSignerGuidAttachmentGuidGet");
            // verify the required parameter 'attachmentGuid' is set
            if (attachmentGuid == null)
                throw new ApiException(400, "Missing required parameter 'attachmentGuid' when calling SessionLifeCycleApi->ApiV1SessionLifeCycleGetAttachmentSessionGuidSignerGuidAttachmentGuidGet");

            var localVarPath = "/api/v1/SessionLifeCycle/GetAttachment/{sessionGuid}/{signerGuid}/{attachmentGuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain; x-api-version=1.0",
                "application/json; x-api-version=1.0",
                "text/json; x-api-version=1.0"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sessionGuid != null) localVarPathParams.Add("sessionGuid", this.Configuration.ApiClient.ParameterToString(sessionGuid)); // path parameter
            if (signerGuid != null) localVarPathParams.Add("signerGuid", this.Configuration.ApiClient.ParameterToString(signerGuid)); // path parameter
            if (attachmentGuid != null) localVarPathParams.Add("attachmentGuid", this.Configuration.ApiClient.ParameterToString(attachmentGuid)); // path parameter
            // authentication (Bearer) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1SessionLifeCycleGetAttachmentSessionGuidSignerGuidAttachmentGuidGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="signerGuid"></param>
        /// <returns>byte[]</returns>
        public byte[] ApiV1SessionLifeCycleGetAuditTrailIdentificationSessionGuidSignerGuidGet (Guid? sessionGuid, Guid? signerGuid)
        {
             ApiResponse<byte[]> localVarResponse = ApiV1SessionLifeCycleGetAuditTrailIdentificationSessionGuidSignerGuidGetWithHttpInfo(sessionGuid, signerGuid);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="signerGuid"></param>
        /// <returns>ApiResponse of byte[]</returns>
        public ApiResponse< byte[] > ApiV1SessionLifeCycleGetAuditTrailIdentificationSessionGuidSignerGuidGetWithHttpInfo (Guid? sessionGuid, Guid? signerGuid)
        {
            // verify the required parameter 'sessionGuid' is set
            if (sessionGuid == null)
                throw new ApiException(400, "Missing required parameter 'sessionGuid' when calling SessionLifeCycleApi->ApiV1SessionLifeCycleGetAuditTrailIdentificationSessionGuidSignerGuidGet");
            // verify the required parameter 'signerGuid' is set
            if (signerGuid == null)
                throw new ApiException(400, "Missing required parameter 'signerGuid' when calling SessionLifeCycleApi->ApiV1SessionLifeCycleGetAuditTrailIdentificationSessionGuidSignerGuidGet");

            var localVarPath = "/api/v1/SessionLifeCycle/GetAuditTrailIdentification/{sessionGuid}/{signerGuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain; x-api-version=1.0",
                "application/json; x-api-version=1.0",
                "text/json; x-api-version=1.0"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sessionGuid != null) localVarPathParams.Add("sessionGuid", this.Configuration.ApiClient.ParameterToString(sessionGuid)); // path parameter
            if (signerGuid != null) localVarPathParams.Add("signerGuid", this.Configuration.ApiClient.ParameterToString(signerGuid)); // path parameter
            // authentication (Bearer) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1SessionLifeCycleGetAuditTrailIdentificationSessionGuidSignerGuidGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="signerGuid"></param>
        /// <returns>Task of byte[]</returns>
        public async System.Threading.Tasks.Task<byte[]> ApiV1SessionLifeCycleGetAuditTrailIdentificationSessionGuidSignerGuidGetAsync (Guid? sessionGuid, Guid? signerGuid)
        {
             ApiResponse<byte[]> localVarResponse = await ApiV1SessionLifeCycleGetAuditTrailIdentificationSessionGuidSignerGuidGetAsyncWithHttpInfo(sessionGuid, signerGuid);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="signerGuid"></param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        public async System.Threading.Tasks.Task<ApiResponse<byte[]>> ApiV1SessionLifeCycleGetAuditTrailIdentificationSessionGuidSignerGuidGetAsyncWithHttpInfo (Guid? sessionGuid, Guid? signerGuid)
        {
            // verify the required parameter 'sessionGuid' is set
            if (sessionGuid == null)
                throw new ApiException(400, "Missing required parameter 'sessionGuid' when calling SessionLifeCycleApi->ApiV1SessionLifeCycleGetAuditTrailIdentificationSessionGuidSignerGuidGet");
            // verify the required parameter 'signerGuid' is set
            if (signerGuid == null)
                throw new ApiException(400, "Missing required parameter 'signerGuid' when calling SessionLifeCycleApi->ApiV1SessionLifeCycleGetAuditTrailIdentificationSessionGuidSignerGuidGet");

            var localVarPath = "/api/v1/SessionLifeCycle/GetAuditTrailIdentification/{sessionGuid}/{signerGuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain; x-api-version=1.0",
                "application/json; x-api-version=1.0",
                "text/json; x-api-version=1.0"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sessionGuid != null) localVarPathParams.Add("sessionGuid", this.Configuration.ApiClient.ParameterToString(sessionGuid)); // path parameter
            if (signerGuid != null) localVarPathParams.Add("signerGuid", this.Configuration.ApiClient.ParameterToString(signerGuid)); // path parameter
            // authentication (Bearer) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1SessionLifeCycleGetAuditTrailIdentificationSessionGuidSignerGuidGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <returns>byte[]</returns>
        public byte[] ApiV1SessionLifeCycleGetAuditTrailSessionGuidGet (Guid? sessionGuid)
        {
             ApiResponse<byte[]> localVarResponse = ApiV1SessionLifeCycleGetAuditTrailSessionGuidGetWithHttpInfo(sessionGuid);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <returns>ApiResponse of byte[]</returns>
        public ApiResponse< byte[] > ApiV1SessionLifeCycleGetAuditTrailSessionGuidGetWithHttpInfo (Guid? sessionGuid)
        {
            // verify the required parameter 'sessionGuid' is set
            if (sessionGuid == null)
                throw new ApiException(400, "Missing required parameter 'sessionGuid' when calling SessionLifeCycleApi->ApiV1SessionLifeCycleGetAuditTrailSessionGuidGet");

            var localVarPath = "/api/v1/SessionLifeCycle/GetAuditTrail/{sessionGuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain; x-api-version=1.0",
                "application/json; x-api-version=1.0",
                "text/json; x-api-version=1.0"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sessionGuid != null) localVarPathParams.Add("sessionGuid", this.Configuration.ApiClient.ParameterToString(sessionGuid)); // path parameter
            // authentication (Bearer) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1SessionLifeCycleGetAuditTrailSessionGuidGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <returns>Task of byte[]</returns>
        public async System.Threading.Tasks.Task<byte[]> ApiV1SessionLifeCycleGetAuditTrailSessionGuidGetAsync (Guid? sessionGuid)
        {
             ApiResponse<byte[]> localVarResponse = await ApiV1SessionLifeCycleGetAuditTrailSessionGuidGetAsyncWithHttpInfo(sessionGuid);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        public async System.Threading.Tasks.Task<ApiResponse<byte[]>> ApiV1SessionLifeCycleGetAuditTrailSessionGuidGetAsyncWithHttpInfo (Guid? sessionGuid)
        {
            // verify the required parameter 'sessionGuid' is set
            if (sessionGuid == null)
                throw new ApiException(400, "Missing required parameter 'sessionGuid' when calling SessionLifeCycleApi->ApiV1SessionLifeCycleGetAuditTrailSessionGuidGet");

            var localVarPath = "/api/v1/SessionLifeCycle/GetAuditTrail/{sessionGuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain; x-api-version=1.0",
                "application/json; x-api-version=1.0",
                "text/json; x-api-version=1.0"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sessionGuid != null) localVarPathParams.Add("sessionGuid", this.Configuration.ApiClient.ParameterToString(sessionGuid)); // path parameter
            // authentication (Bearer) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1SessionLifeCycleGetAuditTrailSessionGuidGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="take"> (optional)</param>
        /// <param name="skip"> (optional)</param>
        /// <returns>List&lt;GetErrorsSessionResponse&gt;</returns>
        public List<GetErrorsSessionResponse> ApiV1SessionLifeCycleGetErrorsGet (int? take = null, int? skip = null)
        {
             ApiResponse<List<GetErrorsSessionResponse>> localVarResponse = ApiV1SessionLifeCycleGetErrorsGetWithHttpInfo(take, skip);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="take"> (optional)</param>
        /// <param name="skip"> (optional)</param>
        /// <returns>ApiResponse of List&lt;GetErrorsSessionResponse&gt;</returns>
        public ApiResponse< List<GetErrorsSessionResponse> > ApiV1SessionLifeCycleGetErrorsGetWithHttpInfo (int? take = null, int? skip = null)
        {

            var localVarPath = "/api/v1/SessionLifeCycle/GetErrors";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain; x-api-version=1.0",
                "application/json; x-api-version=1.0",
                "text/json; x-api-version=1.0"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (take != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "take", take)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "skip", skip)); // query parameter
            // authentication (Bearer) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1SessionLifeCycleGetErrorsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GetErrorsSessionResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<GetErrorsSessionResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GetErrorsSessionResponse>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="take"> (optional)</param>
        /// <param name="skip"> (optional)</param>
        /// <returns>Task of List&lt;GetErrorsSessionResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<GetErrorsSessionResponse>> ApiV1SessionLifeCycleGetErrorsGetAsync (int? take = null, int? skip = null)
        {
             ApiResponse<List<GetErrorsSessionResponse>> localVarResponse = await ApiV1SessionLifeCycleGetErrorsGetAsyncWithHttpInfo(take, skip);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="take"> (optional)</param>
        /// <param name="skip"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;GetErrorsSessionResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<GetErrorsSessionResponse>>> ApiV1SessionLifeCycleGetErrorsGetAsyncWithHttpInfo (int? take = null, int? skip = null)
        {

            var localVarPath = "/api/v1/SessionLifeCycle/GetErrors";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain; x-api-version=1.0",
                "application/json; x-api-version=1.0",
                "text/json; x-api-version=1.0"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (take != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "take", take)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "skip", skip)); // query parameter
            // authentication (Bearer) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1SessionLifeCycleGetErrorsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GetErrorsSessionResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<GetErrorsSessionResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GetErrorsSessionResponse>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <returns>GetSessionDetailResponse</returns>
        public GetSessionDetailResponse ApiV1SessionLifeCycleGetSessionGuidGet (Guid? sessionGuid)
        {
             ApiResponse<GetSessionDetailResponse> localVarResponse = ApiV1SessionLifeCycleGetSessionGuidGetWithHttpInfo(sessionGuid);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <returns>ApiResponse of GetSessionDetailResponse</returns>
        public ApiResponse< GetSessionDetailResponse > ApiV1SessionLifeCycleGetSessionGuidGetWithHttpInfo (Guid? sessionGuid)
        {
            // verify the required parameter 'sessionGuid' is set
            if (sessionGuid == null)
                throw new ApiException(400, "Missing required parameter 'sessionGuid' when calling SessionLifeCycleApi->ApiV1SessionLifeCycleGetSessionGuidGet");

            var localVarPath = "/api/v1/SessionLifeCycle/Get/{sessionGuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain; x-api-version=1.0",
                "application/json; x-api-version=1.0",
                "text/json; x-api-version=1.0"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sessionGuid != null) localVarPathParams.Add("sessionGuid", this.Configuration.ApiClient.ParameterToString(sessionGuid)); // path parameter
            // authentication (Bearer) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1SessionLifeCycleGetSessionGuidGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetSessionDetailResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetSessionDetailResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetSessionDetailResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <returns>Task of GetSessionDetailResponse</returns>
        public async System.Threading.Tasks.Task<GetSessionDetailResponse> ApiV1SessionLifeCycleGetSessionGuidGetAsync (Guid? sessionGuid)
        {
             ApiResponse<GetSessionDetailResponse> localVarResponse = await ApiV1SessionLifeCycleGetSessionGuidGetAsyncWithHttpInfo(sessionGuid);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <returns>Task of ApiResponse (GetSessionDetailResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetSessionDetailResponse>> ApiV1SessionLifeCycleGetSessionGuidGetAsyncWithHttpInfo (Guid? sessionGuid)
        {
            // verify the required parameter 'sessionGuid' is set
            if (sessionGuid == null)
                throw new ApiException(400, "Missing required parameter 'sessionGuid' when calling SessionLifeCycleApi->ApiV1SessionLifeCycleGetSessionGuidGet");

            var localVarPath = "/api/v1/SessionLifeCycle/Get/{sessionGuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain; x-api-version=1.0",
                "application/json; x-api-version=1.0",
                "text/json; x-api-version=1.0"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sessionGuid != null) localVarPathParams.Add("sessionGuid", this.Configuration.ApiClient.ParameterToString(sessionGuid)); // path parameter
            // authentication (Bearer) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1SessionLifeCycleGetSessionGuidGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetSessionDetailResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetSessionDetailResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetSessionDetailResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="documentGuid"></param>
        /// <returns>FileDataBase64</returns>
        public FileDataBase64 ApiV1SessionLifeCycleGetSignedResultBase64SessionGuidDocumentGuidGet (Guid? sessionGuid, Guid? documentGuid)
        {
             ApiResponse<FileDataBase64> localVarResponse = ApiV1SessionLifeCycleGetSignedResultBase64SessionGuidDocumentGuidGetWithHttpInfo(sessionGuid, documentGuid);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="documentGuid"></param>
        /// <returns>ApiResponse of FileDataBase64</returns>
        public ApiResponse< FileDataBase64 > ApiV1SessionLifeCycleGetSignedResultBase64SessionGuidDocumentGuidGetWithHttpInfo (Guid? sessionGuid, Guid? documentGuid)
        {
            // verify the required parameter 'sessionGuid' is set
            if (sessionGuid == null)
                throw new ApiException(400, "Missing required parameter 'sessionGuid' when calling SessionLifeCycleApi->ApiV1SessionLifeCycleGetSignedResultBase64SessionGuidDocumentGuidGet");
            // verify the required parameter 'documentGuid' is set
            if (documentGuid == null)
                throw new ApiException(400, "Missing required parameter 'documentGuid' when calling SessionLifeCycleApi->ApiV1SessionLifeCycleGetSignedResultBase64SessionGuidDocumentGuidGet");

            var localVarPath = "/api/v1/SessionLifeCycle/GetSignedResultBase64/{sessionGuid}/{documentGuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain; x-api-version=1.0",
                "application/json; x-api-version=1.0",
                "text/json; x-api-version=1.0"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sessionGuid != null) localVarPathParams.Add("sessionGuid", this.Configuration.ApiClient.ParameterToString(sessionGuid)); // path parameter
            if (documentGuid != null) localVarPathParams.Add("documentGuid", this.Configuration.ApiClient.ParameterToString(documentGuid)); // path parameter
            // authentication (Bearer) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1SessionLifeCycleGetSignedResultBase64SessionGuidDocumentGuidGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FileDataBase64>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (FileDataBase64) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FileDataBase64)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="documentGuid"></param>
        /// <returns>Task of FileDataBase64</returns>
        public async System.Threading.Tasks.Task<FileDataBase64> ApiV1SessionLifeCycleGetSignedResultBase64SessionGuidDocumentGuidGetAsync (Guid? sessionGuid, Guid? documentGuid)
        {
             ApiResponse<FileDataBase64> localVarResponse = await ApiV1SessionLifeCycleGetSignedResultBase64SessionGuidDocumentGuidGetAsyncWithHttpInfo(sessionGuid, documentGuid);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="documentGuid"></param>
        /// <returns>Task of ApiResponse (FileDataBase64)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FileDataBase64>> ApiV1SessionLifeCycleGetSignedResultBase64SessionGuidDocumentGuidGetAsyncWithHttpInfo (Guid? sessionGuid, Guid? documentGuid)
        {
            // verify the required parameter 'sessionGuid' is set
            if (sessionGuid == null)
                throw new ApiException(400, "Missing required parameter 'sessionGuid' when calling SessionLifeCycleApi->ApiV1SessionLifeCycleGetSignedResultBase64SessionGuidDocumentGuidGet");
            // verify the required parameter 'documentGuid' is set
            if (documentGuid == null)
                throw new ApiException(400, "Missing required parameter 'documentGuid' when calling SessionLifeCycleApi->ApiV1SessionLifeCycleGetSignedResultBase64SessionGuidDocumentGuidGet");

            var localVarPath = "/api/v1/SessionLifeCycle/GetSignedResultBase64/{sessionGuid}/{documentGuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain; x-api-version=1.0",
                "application/json; x-api-version=1.0",
                "text/json; x-api-version=1.0"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sessionGuid != null) localVarPathParams.Add("sessionGuid", this.Configuration.ApiClient.ParameterToString(sessionGuid)); // path parameter
            if (documentGuid != null) localVarPathParams.Add("documentGuid", this.Configuration.ApiClient.ParameterToString(documentGuid)); // path parameter
            // authentication (Bearer) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1SessionLifeCycleGetSignedResultBase64SessionGuidDocumentGuidGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FileDataBase64>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (FileDataBase64) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FileDataBase64)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="documentGuid"></param>
        /// <returns>byte[]</returns>
        public byte[] ApiV1SessionLifeCycleGetSignedResultSessionGuidDocumentGuidGet (Guid? sessionGuid, Guid? documentGuid)
        {
             ApiResponse<byte[]> localVarResponse = ApiV1SessionLifeCycleGetSignedResultSessionGuidDocumentGuidGetWithHttpInfo(sessionGuid, documentGuid);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="documentGuid"></param>
        /// <returns>ApiResponse of byte[]</returns>
        public ApiResponse< byte[] > ApiV1SessionLifeCycleGetSignedResultSessionGuidDocumentGuidGetWithHttpInfo (Guid? sessionGuid, Guid? documentGuid)
        {
            // verify the required parameter 'sessionGuid' is set
            if (sessionGuid == null)
                throw new ApiException(400, "Missing required parameter 'sessionGuid' when calling SessionLifeCycleApi->ApiV1SessionLifeCycleGetSignedResultSessionGuidDocumentGuidGet");
            // verify the required parameter 'documentGuid' is set
            if (documentGuid == null)
                throw new ApiException(400, "Missing required parameter 'documentGuid' when calling SessionLifeCycleApi->ApiV1SessionLifeCycleGetSignedResultSessionGuidDocumentGuidGet");

            var localVarPath = "/api/v1/SessionLifeCycle/GetSignedResult/{sessionGuid}/{documentGuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain; x-api-version=1.0",
                "application/json; x-api-version=1.0",
                "text/json; x-api-version=1.0"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sessionGuid != null) localVarPathParams.Add("sessionGuid", this.Configuration.ApiClient.ParameterToString(sessionGuid)); // path parameter
            if (documentGuid != null) localVarPathParams.Add("documentGuid", this.Configuration.ApiClient.ParameterToString(documentGuid)); // path parameter
            // authentication (Bearer) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1SessionLifeCycleGetSignedResultSessionGuidDocumentGuidGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="documentGuid"></param>
        /// <returns>Task of byte[]</returns>
        public async System.Threading.Tasks.Task<byte[]> ApiV1SessionLifeCycleGetSignedResultSessionGuidDocumentGuidGetAsync (Guid? sessionGuid, Guid? documentGuid)
        {
             ApiResponse<byte[]> localVarResponse = await ApiV1SessionLifeCycleGetSignedResultSessionGuidDocumentGuidGetAsyncWithHttpInfo(sessionGuid, documentGuid);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="documentGuid"></param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        public async System.Threading.Tasks.Task<ApiResponse<byte[]>> ApiV1SessionLifeCycleGetSignedResultSessionGuidDocumentGuidGetAsyncWithHttpInfo (Guid? sessionGuid, Guid? documentGuid)
        {
            // verify the required parameter 'sessionGuid' is set
            if (sessionGuid == null)
                throw new ApiException(400, "Missing required parameter 'sessionGuid' when calling SessionLifeCycleApi->ApiV1SessionLifeCycleGetSignedResultSessionGuidDocumentGuidGet");
            // verify the required parameter 'documentGuid' is set
            if (documentGuid == null)
                throw new ApiException(400, "Missing required parameter 'documentGuid' when calling SessionLifeCycleApi->ApiV1SessionLifeCycleGetSignedResultSessionGuidDocumentGuidGet");

            var localVarPath = "/api/v1/SessionLifeCycle/GetSignedResult/{sessionGuid}/{documentGuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain; x-api-version=1.0",
                "application/json; x-api-version=1.0",
                "text/json; x-api-version=1.0"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sessionGuid != null) localVarPathParams.Add("sessionGuid", this.Configuration.ApiClient.ParameterToString(sessionGuid)); // path parameter
            if (documentGuid != null) localVarPathParams.Add("documentGuid", this.Configuration.ApiClient.ParameterToString(documentGuid)); // path parameter
            // authentication (Bearer) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1SessionLifeCycleGetSignedResultSessionGuidDocumentGuidGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>List&lt;GetStatusSessionResponse&gt;</returns>
        public List<GetStatusSessionResponse> ApiV1SessionLifeCycleGetStatusPost (List<Guid?> body = null)
        {
             ApiResponse<List<GetStatusSessionResponse>> localVarResponse = ApiV1SessionLifeCycleGetStatusPostWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of List&lt;GetStatusSessionResponse&gt;</returns>
        public ApiResponse< List<GetStatusSessionResponse> > ApiV1SessionLifeCycleGetStatusPostWithHttpInfo (List<Guid?> body = null)
        {

            var localVarPath = "/api/v1/SessionLifeCycle/GetStatus";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; x-api-version=1.0", 
                "text/json; x-api-version=1.0", 
                "application/_*+json; x-api-version=1.0"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain; x-api-version=1.0",
                "application/json; x-api-version=1.0",
                "text/json; x-api-version=1.0"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Bearer) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1SessionLifeCycleGetStatusPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GetStatusSessionResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<GetStatusSessionResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GetStatusSessionResponse>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of List&lt;GetStatusSessionResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<GetStatusSessionResponse>> ApiV1SessionLifeCycleGetStatusPostAsync (List<Guid?> body = null)
        {
             ApiResponse<List<GetStatusSessionResponse>> localVarResponse = await ApiV1SessionLifeCycleGetStatusPostAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;GetStatusSessionResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<GetStatusSessionResponse>>> ApiV1SessionLifeCycleGetStatusPostAsyncWithHttpInfo (List<Guid?> body = null)
        {

            var localVarPath = "/api/v1/SessionLifeCycle/GetStatus";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; x-api-version=1.0", 
                "text/json; x-api-version=1.0", 
                "application/_*+json; x-api-version=1.0"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain; x-api-version=1.0",
                "application/json; x-api-version=1.0",
                "text/json; x-api-version=1.0"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Bearer) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1SessionLifeCycleGetStatusPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GetStatusSessionResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<GetStatusSessionResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GetStatusSessionResponse>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void ApiV1SessionLifeCycleMarkErrorAsFixedSessionGuidPost (Guid? sessionGuid, FixErrorRequest body = null)
        {
             ApiV1SessionLifeCycleMarkErrorAsFixedSessionGuidPostWithHttpInfo(sessionGuid, body);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ApiV1SessionLifeCycleMarkErrorAsFixedSessionGuidPostWithHttpInfo (Guid? sessionGuid, FixErrorRequest body = null)
        {
            // verify the required parameter 'sessionGuid' is set
            if (sessionGuid == null)
                throw new ApiException(400, "Missing required parameter 'sessionGuid' when calling SessionLifeCycleApi->ApiV1SessionLifeCycleMarkErrorAsFixedSessionGuidPost");

            var localVarPath = "/api/v1/SessionLifeCycle/MarkErrorAsFixed/{sessionGuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; x-api-version=1.0", 
                "text/json; x-api-version=1.0", 
                "application/_*+json; x-api-version=1.0"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sessionGuid != null) localVarPathParams.Add("sessionGuid", this.Configuration.ApiClient.ParameterToString(sessionGuid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Bearer) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1SessionLifeCycleMarkErrorAsFixedSessionGuidPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiV1SessionLifeCycleMarkErrorAsFixedSessionGuidPostAsync (Guid? sessionGuid, FixErrorRequest body = null)
        {
             await ApiV1SessionLifeCycleMarkErrorAsFixedSessionGuidPostAsyncWithHttpInfo(sessionGuid, body);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ApiV1SessionLifeCycleMarkErrorAsFixedSessionGuidPostAsyncWithHttpInfo (Guid? sessionGuid, FixErrorRequest body = null)
        {
            // verify the required parameter 'sessionGuid' is set
            if (sessionGuid == null)
                throw new ApiException(400, "Missing required parameter 'sessionGuid' when calling SessionLifeCycleApi->ApiV1SessionLifeCycleMarkErrorAsFixedSessionGuidPost");

            var localVarPath = "/api/v1/SessionLifeCycle/MarkErrorAsFixed/{sessionGuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; x-api-version=1.0", 
                "text/json; x-api-version=1.0", 
                "application/_*+json; x-api-version=1.0"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sessionGuid != null) localVarPathParams.Add("sessionGuid", this.Configuration.ApiClient.ParameterToString(sessionGuid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Bearer) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1SessionLifeCycleMarkErrorAsFixedSessionGuidPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <returns>PublishSessionResponse</returns>
        public PublishSessionResponse ApiV1SessionLifeCyclePublishSessionGuidPost (Guid? sessionGuid)
        {
             ApiResponse<PublishSessionResponse> localVarResponse = ApiV1SessionLifeCyclePublishSessionGuidPostWithHttpInfo(sessionGuid);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <returns>ApiResponse of PublishSessionResponse</returns>
        public ApiResponse< PublishSessionResponse > ApiV1SessionLifeCyclePublishSessionGuidPostWithHttpInfo (Guid? sessionGuid)
        {
            // verify the required parameter 'sessionGuid' is set
            if (sessionGuid == null)
                throw new ApiException(400, "Missing required parameter 'sessionGuid' when calling SessionLifeCycleApi->ApiV1SessionLifeCyclePublishSessionGuidPost");

            var localVarPath = "/api/v1/SessionLifeCycle/Publish/{sessionGuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain; x-api-version=1.0",
                "application/json; x-api-version=1.0",
                "text/json; x-api-version=1.0"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sessionGuid != null) localVarPathParams.Add("sessionGuid", this.Configuration.ApiClient.ParameterToString(sessionGuid)); // path parameter
            // authentication (Bearer) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1SessionLifeCyclePublishSessionGuidPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PublishSessionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PublishSessionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PublishSessionResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <returns>Task of PublishSessionResponse</returns>
        public async System.Threading.Tasks.Task<PublishSessionResponse> ApiV1SessionLifeCyclePublishSessionGuidPostAsync (Guid? sessionGuid)
        {
             ApiResponse<PublishSessionResponse> localVarResponse = await ApiV1SessionLifeCyclePublishSessionGuidPostAsyncWithHttpInfo(sessionGuid);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <returns>Task of ApiResponse (PublishSessionResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PublishSessionResponse>> ApiV1SessionLifeCyclePublishSessionGuidPostAsyncWithHttpInfo (Guid? sessionGuid)
        {
            // verify the required parameter 'sessionGuid' is set
            if (sessionGuid == null)
                throw new ApiException(400, "Missing required parameter 'sessionGuid' when calling SessionLifeCycleApi->ApiV1SessionLifeCyclePublishSessionGuidPost");

            var localVarPath = "/api/v1/SessionLifeCycle/Publish/{sessionGuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain; x-api-version=1.0",
                "application/json; x-api-version=1.0",
                "text/json; x-api-version=1.0"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sessionGuid != null) localVarPathParams.Add("sessionGuid", this.Configuration.ApiClient.ParameterToString(sessionGuid)); // path parameter
            // authentication (Bearer) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1SessionLifeCyclePublishSessionGuidPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PublishSessionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PublishSessionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PublishSessionResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="approverGuid"></param>
        /// <returns></returns>
        public void ApiV1SessionLifeCycleRemoveApproverSessionGuidApproverGuidDelete (Guid? sessionGuid, Guid? approverGuid)
        {
             ApiV1SessionLifeCycleRemoveApproverSessionGuidApproverGuidDeleteWithHttpInfo(sessionGuid, approverGuid);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="approverGuid"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ApiV1SessionLifeCycleRemoveApproverSessionGuidApproverGuidDeleteWithHttpInfo (Guid? sessionGuid, Guid? approverGuid)
        {
            // verify the required parameter 'sessionGuid' is set
            if (sessionGuid == null)
                throw new ApiException(400, "Missing required parameter 'sessionGuid' when calling SessionLifeCycleApi->ApiV1SessionLifeCycleRemoveApproverSessionGuidApproverGuidDelete");
            // verify the required parameter 'approverGuid' is set
            if (approverGuid == null)
                throw new ApiException(400, "Missing required parameter 'approverGuid' when calling SessionLifeCycleApi->ApiV1SessionLifeCycleRemoveApproverSessionGuidApproverGuidDelete");

            var localVarPath = "/api/v1/SessionLifeCycle/RemoveApprover/{sessionGuid}/{approverGuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sessionGuid != null) localVarPathParams.Add("sessionGuid", this.Configuration.ApiClient.ParameterToString(sessionGuid)); // path parameter
            if (approverGuid != null) localVarPathParams.Add("approverGuid", this.Configuration.ApiClient.ParameterToString(approverGuid)); // path parameter
            // authentication (Bearer) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1SessionLifeCycleRemoveApproverSessionGuidApproverGuidDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="approverGuid"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiV1SessionLifeCycleRemoveApproverSessionGuidApproverGuidDeleteAsync (Guid? sessionGuid, Guid? approverGuid)
        {
             await ApiV1SessionLifeCycleRemoveApproverSessionGuidApproverGuidDeleteAsyncWithHttpInfo(sessionGuid, approverGuid);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="approverGuid"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ApiV1SessionLifeCycleRemoveApproverSessionGuidApproverGuidDeleteAsyncWithHttpInfo (Guid? sessionGuid, Guid? approverGuid)
        {
            // verify the required parameter 'sessionGuid' is set
            if (sessionGuid == null)
                throw new ApiException(400, "Missing required parameter 'sessionGuid' when calling SessionLifeCycleApi->ApiV1SessionLifeCycleRemoveApproverSessionGuidApproverGuidDelete");
            // verify the required parameter 'approverGuid' is set
            if (approverGuid == null)
                throw new ApiException(400, "Missing required parameter 'approverGuid' when calling SessionLifeCycleApi->ApiV1SessionLifeCycleRemoveApproverSessionGuidApproverGuidDelete");

            var localVarPath = "/api/v1/SessionLifeCycle/RemoveApprover/{sessionGuid}/{approverGuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sessionGuid != null) localVarPathParams.Add("sessionGuid", this.Configuration.ApiClient.ParameterToString(sessionGuid)); // path parameter
            if (approverGuid != null) localVarPathParams.Add("approverGuid", this.Configuration.ApiClient.ParameterToString(approverGuid)); // path parameter
            // authentication (Bearer) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1SessionLifeCycleRemoveApproverSessionGuidApproverGuidDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="signerGuid"></param>
        /// <param name="fieldGroupGuid"></param>
        /// <param name="documentGuid"></param>
        /// <returns></returns>
        public void ApiV1SessionLifeCycleRemoveDocumentFromFieldGroupSessionGuidSignerGuidFieldGroupGuidDocumentGuidDelete (Guid? sessionGuid, Guid? signerGuid, Guid? fieldGroupGuid, Guid? documentGuid)
        {
             ApiV1SessionLifeCycleRemoveDocumentFromFieldGroupSessionGuidSignerGuidFieldGroupGuidDocumentGuidDeleteWithHttpInfo(sessionGuid, signerGuid, fieldGroupGuid, documentGuid);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="signerGuid"></param>
        /// <param name="fieldGroupGuid"></param>
        /// <param name="documentGuid"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ApiV1SessionLifeCycleRemoveDocumentFromFieldGroupSessionGuidSignerGuidFieldGroupGuidDocumentGuidDeleteWithHttpInfo (Guid? sessionGuid, Guid? signerGuid, Guid? fieldGroupGuid, Guid? documentGuid)
        {
            // verify the required parameter 'sessionGuid' is set
            if (sessionGuid == null)
                throw new ApiException(400, "Missing required parameter 'sessionGuid' when calling SessionLifeCycleApi->ApiV1SessionLifeCycleRemoveDocumentFromFieldGroupSessionGuidSignerGuidFieldGroupGuidDocumentGuidDelete");
            // verify the required parameter 'signerGuid' is set
            if (signerGuid == null)
                throw new ApiException(400, "Missing required parameter 'signerGuid' when calling SessionLifeCycleApi->ApiV1SessionLifeCycleRemoveDocumentFromFieldGroupSessionGuidSignerGuidFieldGroupGuidDocumentGuidDelete");
            // verify the required parameter 'fieldGroupGuid' is set
            if (fieldGroupGuid == null)
                throw new ApiException(400, "Missing required parameter 'fieldGroupGuid' when calling SessionLifeCycleApi->ApiV1SessionLifeCycleRemoveDocumentFromFieldGroupSessionGuidSignerGuidFieldGroupGuidDocumentGuidDelete");
            // verify the required parameter 'documentGuid' is set
            if (documentGuid == null)
                throw new ApiException(400, "Missing required parameter 'documentGuid' when calling SessionLifeCycleApi->ApiV1SessionLifeCycleRemoveDocumentFromFieldGroupSessionGuidSignerGuidFieldGroupGuidDocumentGuidDelete");

            var localVarPath = "/api/v1/SessionLifeCycle/RemoveDocumentFromFieldGroup/{sessionGuid}/{signerGuid}/{fieldGroupGuid}/{documentGuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sessionGuid != null) localVarPathParams.Add("sessionGuid", this.Configuration.ApiClient.ParameterToString(sessionGuid)); // path parameter
            if (signerGuid != null) localVarPathParams.Add("signerGuid", this.Configuration.ApiClient.ParameterToString(signerGuid)); // path parameter
            if (fieldGroupGuid != null) localVarPathParams.Add("fieldGroupGuid", this.Configuration.ApiClient.ParameterToString(fieldGroupGuid)); // path parameter
            if (documentGuid != null) localVarPathParams.Add("documentGuid", this.Configuration.ApiClient.ParameterToString(documentGuid)); // path parameter
            // authentication (Bearer) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1SessionLifeCycleRemoveDocumentFromFieldGroupSessionGuidSignerGuidFieldGroupGuidDocumentGuidDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="signerGuid"></param>
        /// <param name="fieldGroupGuid"></param>
        /// <param name="documentGuid"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiV1SessionLifeCycleRemoveDocumentFromFieldGroupSessionGuidSignerGuidFieldGroupGuidDocumentGuidDeleteAsync (Guid? sessionGuid, Guid? signerGuid, Guid? fieldGroupGuid, Guid? documentGuid)
        {
             await ApiV1SessionLifeCycleRemoveDocumentFromFieldGroupSessionGuidSignerGuidFieldGroupGuidDocumentGuidDeleteAsyncWithHttpInfo(sessionGuid, signerGuid, fieldGroupGuid, documentGuid);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="signerGuid"></param>
        /// <param name="fieldGroupGuid"></param>
        /// <param name="documentGuid"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ApiV1SessionLifeCycleRemoveDocumentFromFieldGroupSessionGuidSignerGuidFieldGroupGuidDocumentGuidDeleteAsyncWithHttpInfo (Guid? sessionGuid, Guid? signerGuid, Guid? fieldGroupGuid, Guid? documentGuid)
        {
            // verify the required parameter 'sessionGuid' is set
            if (sessionGuid == null)
                throw new ApiException(400, "Missing required parameter 'sessionGuid' when calling SessionLifeCycleApi->ApiV1SessionLifeCycleRemoveDocumentFromFieldGroupSessionGuidSignerGuidFieldGroupGuidDocumentGuidDelete");
            // verify the required parameter 'signerGuid' is set
            if (signerGuid == null)
                throw new ApiException(400, "Missing required parameter 'signerGuid' when calling SessionLifeCycleApi->ApiV1SessionLifeCycleRemoveDocumentFromFieldGroupSessionGuidSignerGuidFieldGroupGuidDocumentGuidDelete");
            // verify the required parameter 'fieldGroupGuid' is set
            if (fieldGroupGuid == null)
                throw new ApiException(400, "Missing required parameter 'fieldGroupGuid' when calling SessionLifeCycleApi->ApiV1SessionLifeCycleRemoveDocumentFromFieldGroupSessionGuidSignerGuidFieldGroupGuidDocumentGuidDelete");
            // verify the required parameter 'documentGuid' is set
            if (documentGuid == null)
                throw new ApiException(400, "Missing required parameter 'documentGuid' when calling SessionLifeCycleApi->ApiV1SessionLifeCycleRemoveDocumentFromFieldGroupSessionGuidSignerGuidFieldGroupGuidDocumentGuidDelete");

            var localVarPath = "/api/v1/SessionLifeCycle/RemoveDocumentFromFieldGroup/{sessionGuid}/{signerGuid}/{fieldGroupGuid}/{documentGuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sessionGuid != null) localVarPathParams.Add("sessionGuid", this.Configuration.ApiClient.ParameterToString(sessionGuid)); // path parameter
            if (signerGuid != null) localVarPathParams.Add("signerGuid", this.Configuration.ApiClient.ParameterToString(signerGuid)); // path parameter
            if (fieldGroupGuid != null) localVarPathParams.Add("fieldGroupGuid", this.Configuration.ApiClient.ParameterToString(fieldGroupGuid)); // path parameter
            if (documentGuid != null) localVarPathParams.Add("documentGuid", this.Configuration.ApiClient.ParameterToString(documentGuid)); // path parameter
            // authentication (Bearer) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1SessionLifeCycleRemoveDocumentFromFieldGroupSessionGuidSignerGuidFieldGroupGuidDocumentGuidDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="documentGuid"></param>
        /// <param name="documentSealPositionGuid"></param>
        /// <returns></returns>
        public void ApiV1SessionLifeCycleRemoveDocumentSealPositionSessionGuidDocumentGuidDocumentSealPositionGuidDelete (Guid? sessionGuid, Guid? documentGuid, Guid? documentSealPositionGuid)
        {
             ApiV1SessionLifeCycleRemoveDocumentSealPositionSessionGuidDocumentGuidDocumentSealPositionGuidDeleteWithHttpInfo(sessionGuid, documentGuid, documentSealPositionGuid);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="documentGuid"></param>
        /// <param name="documentSealPositionGuid"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ApiV1SessionLifeCycleRemoveDocumentSealPositionSessionGuidDocumentGuidDocumentSealPositionGuidDeleteWithHttpInfo (Guid? sessionGuid, Guid? documentGuid, Guid? documentSealPositionGuid)
        {
            // verify the required parameter 'sessionGuid' is set
            if (sessionGuid == null)
                throw new ApiException(400, "Missing required parameter 'sessionGuid' when calling SessionLifeCycleApi->ApiV1SessionLifeCycleRemoveDocumentSealPositionSessionGuidDocumentGuidDocumentSealPositionGuidDelete");
            // verify the required parameter 'documentGuid' is set
            if (documentGuid == null)
                throw new ApiException(400, "Missing required parameter 'documentGuid' when calling SessionLifeCycleApi->ApiV1SessionLifeCycleRemoveDocumentSealPositionSessionGuidDocumentGuidDocumentSealPositionGuidDelete");
            // verify the required parameter 'documentSealPositionGuid' is set
            if (documentSealPositionGuid == null)
                throw new ApiException(400, "Missing required parameter 'documentSealPositionGuid' when calling SessionLifeCycleApi->ApiV1SessionLifeCycleRemoveDocumentSealPositionSessionGuidDocumentGuidDocumentSealPositionGuidDelete");

            var localVarPath = "/api/v1/SessionLifeCycle/RemoveDocumentSealPosition/{sessionGuid}/{documentGuid}/{documentSealPositionGuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sessionGuid != null) localVarPathParams.Add("sessionGuid", this.Configuration.ApiClient.ParameterToString(sessionGuid)); // path parameter
            if (documentGuid != null) localVarPathParams.Add("documentGuid", this.Configuration.ApiClient.ParameterToString(documentGuid)); // path parameter
            if (documentSealPositionGuid != null) localVarPathParams.Add("documentSealPositionGuid", this.Configuration.ApiClient.ParameterToString(documentSealPositionGuid)); // path parameter
            // authentication (Bearer) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1SessionLifeCycleRemoveDocumentSealPositionSessionGuidDocumentGuidDocumentSealPositionGuidDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="documentGuid"></param>
        /// <param name="documentSealPositionGuid"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiV1SessionLifeCycleRemoveDocumentSealPositionSessionGuidDocumentGuidDocumentSealPositionGuidDeleteAsync (Guid? sessionGuid, Guid? documentGuid, Guid? documentSealPositionGuid)
        {
             await ApiV1SessionLifeCycleRemoveDocumentSealPositionSessionGuidDocumentGuidDocumentSealPositionGuidDeleteAsyncWithHttpInfo(sessionGuid, documentGuid, documentSealPositionGuid);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="documentGuid"></param>
        /// <param name="documentSealPositionGuid"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ApiV1SessionLifeCycleRemoveDocumentSealPositionSessionGuidDocumentGuidDocumentSealPositionGuidDeleteAsyncWithHttpInfo (Guid? sessionGuid, Guid? documentGuid, Guid? documentSealPositionGuid)
        {
            // verify the required parameter 'sessionGuid' is set
            if (sessionGuid == null)
                throw new ApiException(400, "Missing required parameter 'sessionGuid' when calling SessionLifeCycleApi->ApiV1SessionLifeCycleRemoveDocumentSealPositionSessionGuidDocumentGuidDocumentSealPositionGuidDelete");
            // verify the required parameter 'documentGuid' is set
            if (documentGuid == null)
                throw new ApiException(400, "Missing required parameter 'documentGuid' when calling SessionLifeCycleApi->ApiV1SessionLifeCycleRemoveDocumentSealPositionSessionGuidDocumentGuidDocumentSealPositionGuidDelete");
            // verify the required parameter 'documentSealPositionGuid' is set
            if (documentSealPositionGuid == null)
                throw new ApiException(400, "Missing required parameter 'documentSealPositionGuid' when calling SessionLifeCycleApi->ApiV1SessionLifeCycleRemoveDocumentSealPositionSessionGuidDocumentGuidDocumentSealPositionGuidDelete");

            var localVarPath = "/api/v1/SessionLifeCycle/RemoveDocumentSealPosition/{sessionGuid}/{documentGuid}/{documentSealPositionGuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sessionGuid != null) localVarPathParams.Add("sessionGuid", this.Configuration.ApiClient.ParameterToString(sessionGuid)); // path parameter
            if (documentGuid != null) localVarPathParams.Add("documentGuid", this.Configuration.ApiClient.ParameterToString(documentGuid)); // path parameter
            if (documentSealPositionGuid != null) localVarPathParams.Add("documentSealPositionGuid", this.Configuration.ApiClient.ParameterToString(documentSealPositionGuid)); // path parameter
            // authentication (Bearer) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1SessionLifeCycleRemoveDocumentSealPositionSessionGuidDocumentGuidDocumentSealPositionGuidDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="documentGuid"></param>
        /// <returns></returns>
        public void ApiV1SessionLifeCycleRemoveDocumentSessionGuidDocumentGuidDelete (Guid? sessionGuid, Guid? documentGuid)
        {
             ApiV1SessionLifeCycleRemoveDocumentSessionGuidDocumentGuidDeleteWithHttpInfo(sessionGuid, documentGuid);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="documentGuid"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ApiV1SessionLifeCycleRemoveDocumentSessionGuidDocumentGuidDeleteWithHttpInfo (Guid? sessionGuid, Guid? documentGuid)
        {
            // verify the required parameter 'sessionGuid' is set
            if (sessionGuid == null)
                throw new ApiException(400, "Missing required parameter 'sessionGuid' when calling SessionLifeCycleApi->ApiV1SessionLifeCycleRemoveDocumentSessionGuidDocumentGuidDelete");
            // verify the required parameter 'documentGuid' is set
            if (documentGuid == null)
                throw new ApiException(400, "Missing required parameter 'documentGuid' when calling SessionLifeCycleApi->ApiV1SessionLifeCycleRemoveDocumentSessionGuidDocumentGuidDelete");

            var localVarPath = "/api/v1/SessionLifeCycle/RemoveDocument/{sessionGuid}/{documentGuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sessionGuid != null) localVarPathParams.Add("sessionGuid", this.Configuration.ApiClient.ParameterToString(sessionGuid)); // path parameter
            if (documentGuid != null) localVarPathParams.Add("documentGuid", this.Configuration.ApiClient.ParameterToString(documentGuid)); // path parameter
            // authentication (Bearer) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1SessionLifeCycleRemoveDocumentSessionGuidDocumentGuidDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="documentGuid"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiV1SessionLifeCycleRemoveDocumentSessionGuidDocumentGuidDeleteAsync (Guid? sessionGuid, Guid? documentGuid)
        {
             await ApiV1SessionLifeCycleRemoveDocumentSessionGuidDocumentGuidDeleteAsyncWithHttpInfo(sessionGuid, documentGuid);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="documentGuid"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ApiV1SessionLifeCycleRemoveDocumentSessionGuidDocumentGuidDeleteAsyncWithHttpInfo (Guid? sessionGuid, Guid? documentGuid)
        {
            // verify the required parameter 'sessionGuid' is set
            if (sessionGuid == null)
                throw new ApiException(400, "Missing required parameter 'sessionGuid' when calling SessionLifeCycleApi->ApiV1SessionLifeCycleRemoveDocumentSessionGuidDocumentGuidDelete");
            // verify the required parameter 'documentGuid' is set
            if (documentGuid == null)
                throw new ApiException(400, "Missing required parameter 'documentGuid' when calling SessionLifeCycleApi->ApiV1SessionLifeCycleRemoveDocumentSessionGuidDocumentGuidDelete");

            var localVarPath = "/api/v1/SessionLifeCycle/RemoveDocument/{sessionGuid}/{documentGuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sessionGuid != null) localVarPathParams.Add("sessionGuid", this.Configuration.ApiClient.ParameterToString(sessionGuid)); // path parameter
            if (documentGuid != null) localVarPathParams.Add("documentGuid", this.Configuration.ApiClient.ParameterToString(documentGuid)); // path parameter
            // authentication (Bearer) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1SessionLifeCycleRemoveDocumentSessionGuidDocumentGuidDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="signerGuid"></param>
        /// <param name="fieldGroupGuid"></param>
        /// <returns></returns>
        public void ApiV1SessionLifeCycleRemoveFieldGroupSessionGuidSignerGuidFieldGroupGuidDelete (Guid? sessionGuid, Guid? signerGuid, Guid? fieldGroupGuid)
        {
             ApiV1SessionLifeCycleRemoveFieldGroupSessionGuidSignerGuidFieldGroupGuidDeleteWithHttpInfo(sessionGuid, signerGuid, fieldGroupGuid);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="signerGuid"></param>
        /// <param name="fieldGroupGuid"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ApiV1SessionLifeCycleRemoveFieldGroupSessionGuidSignerGuidFieldGroupGuidDeleteWithHttpInfo (Guid? sessionGuid, Guid? signerGuid, Guid? fieldGroupGuid)
        {
            // verify the required parameter 'sessionGuid' is set
            if (sessionGuid == null)
                throw new ApiException(400, "Missing required parameter 'sessionGuid' when calling SessionLifeCycleApi->ApiV1SessionLifeCycleRemoveFieldGroupSessionGuidSignerGuidFieldGroupGuidDelete");
            // verify the required parameter 'signerGuid' is set
            if (signerGuid == null)
                throw new ApiException(400, "Missing required parameter 'signerGuid' when calling SessionLifeCycleApi->ApiV1SessionLifeCycleRemoveFieldGroupSessionGuidSignerGuidFieldGroupGuidDelete");
            // verify the required parameter 'fieldGroupGuid' is set
            if (fieldGroupGuid == null)
                throw new ApiException(400, "Missing required parameter 'fieldGroupGuid' when calling SessionLifeCycleApi->ApiV1SessionLifeCycleRemoveFieldGroupSessionGuidSignerGuidFieldGroupGuidDelete");

            var localVarPath = "/api/v1/SessionLifeCycle/RemoveFieldGroup/{sessionGuid}/{signerGuid}/{fieldGroupGuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sessionGuid != null) localVarPathParams.Add("sessionGuid", this.Configuration.ApiClient.ParameterToString(sessionGuid)); // path parameter
            if (signerGuid != null) localVarPathParams.Add("signerGuid", this.Configuration.ApiClient.ParameterToString(signerGuid)); // path parameter
            if (fieldGroupGuid != null) localVarPathParams.Add("fieldGroupGuid", this.Configuration.ApiClient.ParameterToString(fieldGroupGuid)); // path parameter
            // authentication (Bearer) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1SessionLifeCycleRemoveFieldGroupSessionGuidSignerGuidFieldGroupGuidDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="signerGuid"></param>
        /// <param name="fieldGroupGuid"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiV1SessionLifeCycleRemoveFieldGroupSessionGuidSignerGuidFieldGroupGuidDeleteAsync (Guid? sessionGuid, Guid? signerGuid, Guid? fieldGroupGuid)
        {
             await ApiV1SessionLifeCycleRemoveFieldGroupSessionGuidSignerGuidFieldGroupGuidDeleteAsyncWithHttpInfo(sessionGuid, signerGuid, fieldGroupGuid);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="signerGuid"></param>
        /// <param name="fieldGroupGuid"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ApiV1SessionLifeCycleRemoveFieldGroupSessionGuidSignerGuidFieldGroupGuidDeleteAsyncWithHttpInfo (Guid? sessionGuid, Guid? signerGuid, Guid? fieldGroupGuid)
        {
            // verify the required parameter 'sessionGuid' is set
            if (sessionGuid == null)
                throw new ApiException(400, "Missing required parameter 'sessionGuid' when calling SessionLifeCycleApi->ApiV1SessionLifeCycleRemoveFieldGroupSessionGuidSignerGuidFieldGroupGuidDelete");
            // verify the required parameter 'signerGuid' is set
            if (signerGuid == null)
                throw new ApiException(400, "Missing required parameter 'signerGuid' when calling SessionLifeCycleApi->ApiV1SessionLifeCycleRemoveFieldGroupSessionGuidSignerGuidFieldGroupGuidDelete");
            // verify the required parameter 'fieldGroupGuid' is set
            if (fieldGroupGuid == null)
                throw new ApiException(400, "Missing required parameter 'fieldGroupGuid' when calling SessionLifeCycleApi->ApiV1SessionLifeCycleRemoveFieldGroupSessionGuidSignerGuidFieldGroupGuidDelete");

            var localVarPath = "/api/v1/SessionLifeCycle/RemoveFieldGroup/{sessionGuid}/{signerGuid}/{fieldGroupGuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sessionGuid != null) localVarPathParams.Add("sessionGuid", this.Configuration.ApiClient.ParameterToString(sessionGuid)); // path parameter
            if (signerGuid != null) localVarPathParams.Add("signerGuid", this.Configuration.ApiClient.ParameterToString(signerGuid)); // path parameter
            if (fieldGroupGuid != null) localVarPathParams.Add("fieldGroupGuid", this.Configuration.ApiClient.ParameterToString(fieldGroupGuid)); // path parameter
            // authentication (Bearer) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1SessionLifeCycleRemoveFieldGroupSessionGuidSignerGuidFieldGroupGuidDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void ApiV1SessionLifeCycleRemoveFieldPost (RemoveFieldRequest body = null)
        {
             ApiV1SessionLifeCycleRemoveFieldPostWithHttpInfo(body);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ApiV1SessionLifeCycleRemoveFieldPostWithHttpInfo (RemoveFieldRequest body = null)
        {

            var localVarPath = "/api/v1/SessionLifeCycle/RemoveField";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; x-api-version=1.0", 
                "text/json; x-api-version=1.0", 
                "application/_*+json; x-api-version=1.0"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Bearer) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1SessionLifeCycleRemoveFieldPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiV1SessionLifeCycleRemoveFieldPostAsync (RemoveFieldRequest body = null)
        {
             await ApiV1SessionLifeCycleRemoveFieldPostAsyncWithHttpInfo(body);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ApiV1SessionLifeCycleRemoveFieldPostAsyncWithHttpInfo (RemoveFieldRequest body = null)
        {

            var localVarPath = "/api/v1/SessionLifeCycle/RemoveField";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; x-api-version=1.0", 
                "text/json; x-api-version=1.0", 
                "application/_*+json; x-api-version=1.0"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Bearer) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1SessionLifeCycleRemoveFieldPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="followerGuid"></param>
        /// <returns></returns>
        public void ApiV1SessionLifeCycleRemoveFollowerSessionGuidFollowerGuidDelete (Guid? sessionGuid, Guid? followerGuid)
        {
             ApiV1SessionLifeCycleRemoveFollowerSessionGuidFollowerGuidDeleteWithHttpInfo(sessionGuid, followerGuid);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="followerGuid"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ApiV1SessionLifeCycleRemoveFollowerSessionGuidFollowerGuidDeleteWithHttpInfo (Guid? sessionGuid, Guid? followerGuid)
        {
            // verify the required parameter 'sessionGuid' is set
            if (sessionGuid == null)
                throw new ApiException(400, "Missing required parameter 'sessionGuid' when calling SessionLifeCycleApi->ApiV1SessionLifeCycleRemoveFollowerSessionGuidFollowerGuidDelete");
            // verify the required parameter 'followerGuid' is set
            if (followerGuid == null)
                throw new ApiException(400, "Missing required parameter 'followerGuid' when calling SessionLifeCycleApi->ApiV1SessionLifeCycleRemoveFollowerSessionGuidFollowerGuidDelete");

            var localVarPath = "/api/v1/SessionLifeCycle/RemoveFollower/{sessionGuid}/{followerGuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sessionGuid != null) localVarPathParams.Add("sessionGuid", this.Configuration.ApiClient.ParameterToString(sessionGuid)); // path parameter
            if (followerGuid != null) localVarPathParams.Add("followerGuid", this.Configuration.ApiClient.ParameterToString(followerGuid)); // path parameter
            // authentication (Bearer) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1SessionLifeCycleRemoveFollowerSessionGuidFollowerGuidDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="followerGuid"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiV1SessionLifeCycleRemoveFollowerSessionGuidFollowerGuidDeleteAsync (Guid? sessionGuid, Guid? followerGuid)
        {
             await ApiV1SessionLifeCycleRemoveFollowerSessionGuidFollowerGuidDeleteAsyncWithHttpInfo(sessionGuid, followerGuid);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="followerGuid"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ApiV1SessionLifeCycleRemoveFollowerSessionGuidFollowerGuidDeleteAsyncWithHttpInfo (Guid? sessionGuid, Guid? followerGuid)
        {
            // verify the required parameter 'sessionGuid' is set
            if (sessionGuid == null)
                throw new ApiException(400, "Missing required parameter 'sessionGuid' when calling SessionLifeCycleApi->ApiV1SessionLifeCycleRemoveFollowerSessionGuidFollowerGuidDelete");
            // verify the required parameter 'followerGuid' is set
            if (followerGuid == null)
                throw new ApiException(400, "Missing required parameter 'followerGuid' when calling SessionLifeCycleApi->ApiV1SessionLifeCycleRemoveFollowerSessionGuidFollowerGuidDelete");

            var localVarPath = "/api/v1/SessionLifeCycle/RemoveFollower/{sessionGuid}/{followerGuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sessionGuid != null) localVarPathParams.Add("sessionGuid", this.Configuration.ApiClient.ParameterToString(sessionGuid)); // path parameter
            if (followerGuid != null) localVarPathParams.Add("followerGuid", this.Configuration.ApiClient.ParameterToString(followerGuid)); // path parameter
            // authentication (Bearer) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1SessionLifeCycleRemoveFollowerSessionGuidFollowerGuidDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="signerGuid"></param>
        /// <returns></returns>
        public void ApiV1SessionLifeCycleRemoveSignerSessionGuidSignerGuidDelete (Guid? sessionGuid, Guid? signerGuid)
        {
             ApiV1SessionLifeCycleRemoveSignerSessionGuidSignerGuidDeleteWithHttpInfo(sessionGuid, signerGuid);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="signerGuid"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ApiV1SessionLifeCycleRemoveSignerSessionGuidSignerGuidDeleteWithHttpInfo (Guid? sessionGuid, Guid? signerGuid)
        {
            // verify the required parameter 'sessionGuid' is set
            if (sessionGuid == null)
                throw new ApiException(400, "Missing required parameter 'sessionGuid' when calling SessionLifeCycleApi->ApiV1SessionLifeCycleRemoveSignerSessionGuidSignerGuidDelete");
            // verify the required parameter 'signerGuid' is set
            if (signerGuid == null)
                throw new ApiException(400, "Missing required parameter 'signerGuid' when calling SessionLifeCycleApi->ApiV1SessionLifeCycleRemoveSignerSessionGuidSignerGuidDelete");

            var localVarPath = "/api/v1/SessionLifeCycle/RemoveSigner/{sessionGuid}/{signerGuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sessionGuid != null) localVarPathParams.Add("sessionGuid", this.Configuration.ApiClient.ParameterToString(sessionGuid)); // path parameter
            if (signerGuid != null) localVarPathParams.Add("signerGuid", this.Configuration.ApiClient.ParameterToString(signerGuid)); // path parameter
            // authentication (Bearer) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1SessionLifeCycleRemoveSignerSessionGuidSignerGuidDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="signerGuid"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiV1SessionLifeCycleRemoveSignerSessionGuidSignerGuidDeleteAsync (Guid? sessionGuid, Guid? signerGuid)
        {
             await ApiV1SessionLifeCycleRemoveSignerSessionGuidSignerGuidDeleteAsyncWithHttpInfo(sessionGuid, signerGuid);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="signerGuid"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ApiV1SessionLifeCycleRemoveSignerSessionGuidSignerGuidDeleteAsyncWithHttpInfo (Guid? sessionGuid, Guid? signerGuid)
        {
            // verify the required parameter 'sessionGuid' is set
            if (sessionGuid == null)
                throw new ApiException(400, "Missing required parameter 'sessionGuid' when calling SessionLifeCycleApi->ApiV1SessionLifeCycleRemoveSignerSessionGuidSignerGuidDelete");
            // verify the required parameter 'signerGuid' is set
            if (signerGuid == null)
                throw new ApiException(400, "Missing required parameter 'signerGuid' when calling SessionLifeCycleApi->ApiV1SessionLifeCycleRemoveSignerSessionGuidSignerGuidDelete");

            var localVarPath = "/api/v1/SessionLifeCycle/RemoveSigner/{sessionGuid}/{signerGuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sessionGuid != null) localVarPathParams.Add("sessionGuid", this.Configuration.ApiClient.ParameterToString(sessionGuid)); // path parameter
            if (signerGuid != null) localVarPathParams.Add("signerGuid", this.Configuration.ApiClient.ParameterToString(signerGuid)); // path parameter
            // authentication (Bearer) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1SessionLifeCycleRemoveSignerSessionGuidSignerGuidDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Send an email with the link to activate the identification session Send an email with the link to activate the identification session
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ActorType</returns>
        public ActorType ApiV1SessionLifeCycleSendEmailSessionGuidPost (Guid? sessionGuid, SendEmailRequest body = null)
        {
             ApiResponse<ActorType> localVarResponse = ApiV1SessionLifeCycleSendEmailSessionGuidPostWithHttpInfo(sessionGuid, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Send an email with the link to activate the identification session Send an email with the link to activate the identification session
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ActorType</returns>
        public ApiResponse< ActorType > ApiV1SessionLifeCycleSendEmailSessionGuidPostWithHttpInfo (Guid? sessionGuid, SendEmailRequest body = null)
        {
            // verify the required parameter 'sessionGuid' is set
            if (sessionGuid == null)
                throw new ApiException(400, "Missing required parameter 'sessionGuid' when calling SessionLifeCycleApi->ApiV1SessionLifeCycleSendEmailSessionGuidPost");

            var localVarPath = "/api/v1/SessionLifeCycle/SendEmail/{sessionGuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; x-api-version=1.0", 
                "text/json; x-api-version=1.0", 
                "application/_*+json; x-api-version=1.0"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain; x-api-version=1.0",
                "application/json; x-api-version=1.0",
                "text/json; x-api-version=1.0"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sessionGuid != null) localVarPathParams.Add("sessionGuid", this.Configuration.ApiClient.ParameterToString(sessionGuid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Bearer) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1SessionLifeCycleSendEmailSessionGuidPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ActorType>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ActorType) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ActorType)));
        }

        /// <summary>
        /// Send an email with the link to activate the identification session Send an email with the link to activate the identification session
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ActorType</returns>
        public async System.Threading.Tasks.Task<ActorType> ApiV1SessionLifeCycleSendEmailSessionGuidPostAsync (Guid? sessionGuid, SendEmailRequest body = null)
        {
             ApiResponse<ActorType> localVarResponse = await ApiV1SessionLifeCycleSendEmailSessionGuidPostAsyncWithHttpInfo(sessionGuid, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Send an email with the link to activate the identification session Send an email with the link to activate the identification session
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ActorType)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ActorType>> ApiV1SessionLifeCycleSendEmailSessionGuidPostAsyncWithHttpInfo (Guid? sessionGuid, SendEmailRequest body = null)
        {
            // verify the required parameter 'sessionGuid' is set
            if (sessionGuid == null)
                throw new ApiException(400, "Missing required parameter 'sessionGuid' when calling SessionLifeCycleApi->ApiV1SessionLifeCycleSendEmailSessionGuidPost");

            var localVarPath = "/api/v1/SessionLifeCycle/SendEmail/{sessionGuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; x-api-version=1.0", 
                "text/json; x-api-version=1.0", 
                "application/_*+json; x-api-version=1.0"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain; x-api-version=1.0",
                "application/json; x-api-version=1.0",
                "text/json; x-api-version=1.0"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sessionGuid != null) localVarPathParams.Add("sessionGuid", this.Configuration.ApiClient.ParameterToString(sessionGuid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Bearer) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1SessionLifeCycleSendEmailSessionGuidPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ActorType>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ActorType) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ActorType)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void ApiV1SessionLifeCycleUpdateSessionGuidPatch (Guid? sessionGuid, UpdateSessionRequest body = null)
        {
             ApiV1SessionLifeCycleUpdateSessionGuidPatchWithHttpInfo(sessionGuid, body);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ApiV1SessionLifeCycleUpdateSessionGuidPatchWithHttpInfo (Guid? sessionGuid, UpdateSessionRequest body = null)
        {
            // verify the required parameter 'sessionGuid' is set
            if (sessionGuid == null)
                throw new ApiException(400, "Missing required parameter 'sessionGuid' when calling SessionLifeCycleApi->ApiV1SessionLifeCycleUpdateSessionGuidPatch");

            var localVarPath = "/api/v1/SessionLifeCycle/Update/{sessionGuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; x-api-version=1.0", 
                "text/json; x-api-version=1.0", 
                "application/_*+json; x-api-version=1.0"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sessionGuid != null) localVarPathParams.Add("sessionGuid", this.Configuration.ApiClient.ParameterToString(sessionGuid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Bearer) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1SessionLifeCycleUpdateSessionGuidPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiV1SessionLifeCycleUpdateSessionGuidPatchAsync (Guid? sessionGuid, UpdateSessionRequest body = null)
        {
             await ApiV1SessionLifeCycleUpdateSessionGuidPatchAsyncWithHttpInfo(sessionGuid, body);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ApiV1SessionLifeCycleUpdateSessionGuidPatchAsyncWithHttpInfo (Guid? sessionGuid, UpdateSessionRequest body = null)
        {
            // verify the required parameter 'sessionGuid' is set
            if (sessionGuid == null)
                throw new ApiException(400, "Missing required parameter 'sessionGuid' when calling SessionLifeCycleApi->ApiV1SessionLifeCycleUpdateSessionGuidPatch");

            var localVarPath = "/api/v1/SessionLifeCycle/Update/{sessionGuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; x-api-version=1.0", 
                "text/json; x-api-version=1.0", 
                "application/_*+json; x-api-version=1.0"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sessionGuid != null) localVarPathParams.Add("sessionGuid", this.Configuration.ApiClient.ParameterToString(sessionGuid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Bearer) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1SessionLifeCycleUpdateSessionGuidPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>SavedFileResponse</returns>
        public SavedFileResponse ApiV1SessionLifeCycleUploadFileBase64Post (UploadFileBase64Request body = null)
        {
             ApiResponse<SavedFileResponse> localVarResponse = ApiV1SessionLifeCycleUploadFileBase64PostWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of SavedFileResponse</returns>
        public ApiResponse< SavedFileResponse > ApiV1SessionLifeCycleUploadFileBase64PostWithHttpInfo (UploadFileBase64Request body = null)
        {

            var localVarPath = "/api/v1/SessionLifeCycle/UploadFileBase64";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; x-api-version=1.0", 
                "text/json; x-api-version=1.0", 
                "application/_*+json; x-api-version=1.0"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain; x-api-version=1.0",
                "application/json; x-api-version=1.0",
                "text/json; x-api-version=1.0"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Bearer) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1SessionLifeCycleUploadFileBase64Post", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SavedFileResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SavedFileResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SavedFileResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of SavedFileResponse</returns>
        public async System.Threading.Tasks.Task<SavedFileResponse> ApiV1SessionLifeCycleUploadFileBase64PostAsync (UploadFileBase64Request body = null)
        {
             ApiResponse<SavedFileResponse> localVarResponse = await ApiV1SessionLifeCycleUploadFileBase64PostAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (SavedFileResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SavedFileResponse>> ApiV1SessionLifeCycleUploadFileBase64PostAsyncWithHttpInfo (UploadFileBase64Request body = null)
        {

            var localVarPath = "/api/v1/SessionLifeCycle/UploadFileBase64";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; x-api-version=1.0", 
                "text/json; x-api-version=1.0", 
                "application/_*+json; x-api-version=1.0"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain; x-api-version=1.0",
                "application/json; x-api-version=1.0",
                "text/json; x-api-version=1.0"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Bearer) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1SessionLifeCycleUploadFileBase64Post", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SavedFileResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SavedFileResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SavedFileResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"> (optional)</param>
        /// <returns>SavedFileResponse</returns>
        public SavedFileResponse ApiV1SessionLifeCycleUploadFilePost (byte[] file = null)
        {
             ApiResponse<SavedFileResponse> localVarResponse = ApiV1SessionLifeCycleUploadFilePostWithHttpInfo(file);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"> (optional)</param>
        /// <returns>ApiResponse of SavedFileResponse</returns>
        public ApiResponse< SavedFileResponse > ApiV1SessionLifeCycleUploadFilePostWithHttpInfo (byte[] file = null)
        {

            var localVarPath = "/api/v1/SessionLifeCycle/UploadFile";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain; x-api-version=1.0",
                "application/json; x-api-version=1.0",
                "text/json; x-api-version=1.0"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (file != null) localVarFileParams.Add("file", this.Configuration.ApiClient.ParameterToFile("file", file));
            // authentication (Bearer) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1SessionLifeCycleUploadFilePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SavedFileResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SavedFileResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SavedFileResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"> (optional)</param>
        /// <returns>Task of SavedFileResponse</returns>
        public async System.Threading.Tasks.Task<SavedFileResponse> ApiV1SessionLifeCycleUploadFilePostAsync (byte[] file = null)
        {
             ApiResponse<SavedFileResponse> localVarResponse = await ApiV1SessionLifeCycleUploadFilePostAsyncWithHttpInfo(file);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"> (optional)</param>
        /// <returns>Task of ApiResponse (SavedFileResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SavedFileResponse>> ApiV1SessionLifeCycleUploadFilePostAsyncWithHttpInfo (byte[] file = null)
        {

            var localVarPath = "/api/v1/SessionLifeCycle/UploadFile";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain; x-api-version=1.0",
                "application/json; x-api-version=1.0",
                "text/json; x-api-version=1.0"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (file != null) localVarFileParams.Add("file", this.Configuration.ApiClient.ParameterToFile("file", file));
            // authentication (Bearer) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1SessionLifeCycleUploadFilePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SavedFileResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SavedFileResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SavedFileResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>List&lt;SavedFileResponse&gt;</returns>
        public List<SavedFileResponse> ApiV1SessionLifeCycleUploadFilesBase64Post (UploadFilesRequest body = null)
        {
             ApiResponse<List<SavedFileResponse>> localVarResponse = ApiV1SessionLifeCycleUploadFilesBase64PostWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of List&lt;SavedFileResponse&gt;</returns>
        public ApiResponse< List<SavedFileResponse> > ApiV1SessionLifeCycleUploadFilesBase64PostWithHttpInfo (UploadFilesRequest body = null)
        {

            var localVarPath = "/api/v1/SessionLifeCycle/UploadFilesBase64";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; x-api-version=1.0", 
                "text/json; x-api-version=1.0", 
                "application/_*+json; x-api-version=1.0"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain; x-api-version=1.0",
                "application/json; x-api-version=1.0",
                "text/json; x-api-version=1.0"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Bearer) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1SessionLifeCycleUploadFilesBase64Post", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<SavedFileResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<SavedFileResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<SavedFileResponse>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of List&lt;SavedFileResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<SavedFileResponse>> ApiV1SessionLifeCycleUploadFilesBase64PostAsync (UploadFilesRequest body = null)
        {
             ApiResponse<List<SavedFileResponse>> localVarResponse = await ApiV1SessionLifeCycleUploadFilesBase64PostAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;SavedFileResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<SavedFileResponse>>> ApiV1SessionLifeCycleUploadFilesBase64PostAsyncWithHttpInfo (UploadFilesRequest body = null)
        {

            var localVarPath = "/api/v1/SessionLifeCycle/UploadFilesBase64";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; x-api-version=1.0", 
                "text/json; x-api-version=1.0", 
                "application/_*+json; x-api-version=1.0"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain; x-api-version=1.0",
                "application/json; x-api-version=1.0",
                "text/json; x-api-version=1.0"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Bearer) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1SessionLifeCycleUploadFilesBase64Post", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<SavedFileResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<SavedFileResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<SavedFileResponse>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="files"> (optional)</param>
        /// <returns>List&lt;SavedFileResponse&gt;</returns>
        public List<SavedFileResponse> ApiV1SessionLifeCycleUploadFilesPost (List<byte[]> files = null)
        {
             ApiResponse<List<SavedFileResponse>> localVarResponse = ApiV1SessionLifeCycleUploadFilesPostWithHttpInfo(files);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="files"> (optional)</param>
        /// <returns>ApiResponse of List&lt;SavedFileResponse&gt;</returns>
        public ApiResponse< List<SavedFileResponse> > ApiV1SessionLifeCycleUploadFilesPostWithHttpInfo (List<byte[]> files = null)
        {

            var localVarPath = "/api/v1/SessionLifeCycle/UploadFiles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain; x-api-version=1.0",
                "application/json; x-api-version=1.0",
                "text/json; x-api-version=1.0"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (files != null) localVarFormParams.Add("files", this.Configuration.ApiClient.ParameterToString(files)); // form parameter
            // authentication (Bearer) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1SessionLifeCycleUploadFilesPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<SavedFileResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<SavedFileResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<SavedFileResponse>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="files"> (optional)</param>
        /// <returns>Task of List&lt;SavedFileResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<SavedFileResponse>> ApiV1SessionLifeCycleUploadFilesPostAsync (List<byte[]> files = null)
        {
             ApiResponse<List<SavedFileResponse>> localVarResponse = await ApiV1SessionLifeCycleUploadFilesPostAsyncWithHttpInfo(files);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="files"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;SavedFileResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<SavedFileResponse>>> ApiV1SessionLifeCycleUploadFilesPostAsyncWithHttpInfo (List<byte[]> files = null)
        {

            var localVarPath = "/api/v1/SessionLifeCycle/UploadFiles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain; x-api-version=1.0",
                "application/json; x-api-version=1.0",
                "text/json; x-api-version=1.0"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (files != null) localVarFormParams.Add("files", this.Configuration.ApiClient.ParameterToString(files)); // form parameter
            // authentication (Bearer) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1SessionLifeCycleUploadFilesPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<SavedFileResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<SavedFileResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<SavedFileResponse>)));
        }

    }
}
